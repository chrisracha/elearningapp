@page "/"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Services
@using ELearningApp.Components.Shared
@inject StaticDataService DataService
@inject ICourseService CourseService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Home - E-Learning Platform</PageTitle>

<!-- Hero Banner -->
<div class="relative w-full h-96 overflow-hidden">
    <img src="https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&q=80" 
         alt="Learn Anywhere" 
         class="w-full h-full object-cover">
         
    <div class="absolute inset-0 bg-black bg-opacity-50 flex flex-col justify-center items-center text-center text-white p-6">
        <h1 class="text-4xl md:text-5xl font-bold mb-4">Find Your Next Course</h1>
        <p class="text-lg md:text-xl mb-8 max-w-2xl">From web development to business, we have a course for you. Start learning today!</p>
        
        <div class="w-full max-w-xl">
            <div class="relative">
                <input type="text" 
                       @bind="searchTerm"
                       @bind:event="oninput"
                       @onkeypress="HandleSearchKeyPress"
                       disabled="@isSearching"
                       class="w-full py-4 px-6 pr-16 rounded-full text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-4 focus:ring-primary-300 disabled:bg-gray-100 disabled:cursor-not-allowed" 
                       placeholder="Search courses, instructors, topics...">
                <button @onclick="Search"
                        disabled="@(isSearching || string.IsNullOrWhiteSpace(searchTerm))"
                        class="absolute top-1/2 right-2 transform -translate-y-1/2 bg-primary-600 text-white rounded-full p-3 hover:bg-primary-700 disabled:bg-primary-400 disabled:cursor-not-allowed transition-colors">
                    @if (isSearching)
                    {
                        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                    }
                    else
                    {
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    }
                </button>
            </div>
            @if (isSearching)
            {
                <p class="text-sm text-primary-100 mt-2">Searching courses...</p>
            }
        </div>
    </div>
</div>

<!-- Browse Top Categories Section -->
<div class="py-16 bg-gray-50">
    <div class="container mx-auto px-6">
        <div class="flex justify-between items-center mb-12">
            <div>
                <h2 class="text-3xl font-bold text-gray-900 mb-2">Browse Top Categories</h2>
                <p class="text-gray-600">Explore our most popular categories.</p>
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var category in categories)
            {
                <div class="bg-white rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow border border-gray-100 cursor-pointer"
                     @onclick="() => ViewCoursesByCategory(category.Id)"
                     @onclick:preventDefault="true">
                    <div class="flex items-start space-x-4">
                        <div class="w-16 h-16 @category.Color rounded-lg flex items-center justify-center flex-shrink-0">
                            @{
                                var iconColor = category.IconUrl switch
                                {
                                    "code" => "text-blue-600",
                                    "briefcase" => "text-emerald-600",
                                    "paint-brush" => "text-purple-600",
                                    "language" => "text-amber-600",
                                    "chart-bar" => "text-indigo-600",
                                    "chart-pie" => "text-rose-600",
                                    _ => "text-gray-600"
                                };
                                var finalCssClass = $"w-8 h-8 {iconColor}";
                            }
                            <TailwindIcon IconType="@category.IconUrl" CssClass="@finalCssClass" />
                        </div>
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold text-gray-900 mb-2">@category.Name</h3>
                            <p class="text-sm text-gray-600 mb-3">@category.Description</p>
                            <p class="text-xs text-gray-500 uppercase tracking-wide">@category.CourseCount+ Courses</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Top Courses Section -->
<div class="py-16 bg-white">
    <div class="container mx-auto px-6">
        <h2 class="text-3xl font-bold text-gray-900 mb-12">Top Courses</h2>
        
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
            </div>
        }
        else if (topCourses.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                @foreach (var course in topCourses)
                {
                    <div class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow cursor-pointer"
                         @onclick="() => ViewCourse(course.Id)"
                         @onclick:preventDefault="true">
                        <div class="relative">
                            <img src="@course.ImageUrl" alt="@course.Title" class="w-full h-48 object-cover">
                            @if (course.IsBestseller)
                            {
                                <div class="absolute top-3 left-3 bg-yellow-400 text-black px-2 py-1 rounded text-xs font-semibold">
                                    Bestseller
                                </div>
                            }
                        </div>
                        
                        <div class="p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">@course.Title</h3>
                            <p class="text-sm text-gray-600 mb-3 line-clamp-3">@course.Description</p>
                            
                            <!-- Instructor with Profile Image -->
                            <div class="flex items-center mb-4">
                                <div class="w-8 h-8 rounded-full mr-3 flex-shrink-0 overflow-hidden bg-gray-300">
                                    @if (!string.IsNullOrEmpty(course.InstructorProfileImageUrl))
                                    {
                                        <img src="@course.InstructorProfileImageUrl" alt="@course.InstructorName" class="w-full h-full object-cover">
                                    }
                                    else
                                    {
                                        <div class="w-full h-full flex items-center justify-center">
                                            <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                                            </svg>
                                        </div>
                                    }
                                </div>
                                <button @onclick="() => ViewInstructor(course.InstructorId)"
                                        @onclick:stopPropagation="true"
                                        class="text-sm text-primary-600 hover:text-primary-800 hover:underline font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-1 rounded px-1">
                                    @course.InstructorName
                                </button>
                            </div>
                            
                            <div class="flex items-center mb-4">
                                <div class="flex items-center space-x-1">
                                    <span class="text-yellow-400 font-bold">@course.Rating.ToString("F1")</span>
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <svg class="w-4 h-4 @(i <= course.Rating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                        </svg>
                                    }
                                    <span class="text-sm text-gray-500 ml-2">(@course.ReviewCount.ToString("N0"))</span>
                                </div>
                            </div>
                            
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-2">
                                    <span class="text-xl font-bold text-green-600">Free</span>
                                </div>
                                <span class="text-sm text-gray-600">@course.Duration</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <p class="text-gray-500">No courses available at the moment.</p>
            </div>
        }
    </div>
</div>

<!-- Trusted by Companies Section -->
<div class="py-16 bg-gray-50">
    <div class="container mx-auto px-6">
        <h2 class="text-3xl font-bold text-center text-gray-900 mb-12">Trusted by Companies</h2>
        
        <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-8 items-center">
            @foreach (var company in trustedCompanies)
            {
                <div class="flex justify-center items-center h-16 grayscale hover:grayscale-0 transition-all">
                    <img src="@company.LogoUrl" alt="@company.Name" class="max-h-12 max-w-full object-contain">
                </div>
            }
        </div>
    </div>
</div>

<!-- Plans Section -->
<div class="py-16 bg-white">
    <div class="container mx-auto px-6">
        <div class="text-center mb-12">
            <h2 class="text-3xl font-bold text-gray-900 mb-4">Plans</h2>
            <p class="text-gray-600">Reach goals faster with our plans or programs.</p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            @foreach (var plan in pricingPlans)
            {
                <div class="bg-white rounded-lg shadow-lg p-8 relative @(plan.IsPopular ? "ring-2 ring-primary-500" : "border border-gray-200")">
                    @if (plan.IsPopular)
                    {
                        <div class="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-primary-600 text-white px-4 py-1 rounded-full text-sm font-semibold">
                            Most Popular
                        </div>
                    }
                    
                    <div class="text-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-900 mb-2">@plan.Name</h3>
                        <p class="text-gray-600 mb-4">@plan.Description</p>
                        
                        @if (plan.Price > 0)
                        {
                            <div class="text-2xl font-bold text-gray-900 mb-1">@plan.PriceDescription</div>
                        }
                        else
                        {
                            <div class="text-lg font-semibold text-gray-900 mb-1">@plan.PriceDescription</div>
                        }
                    </div>
                    
                    <button class="w-full py-3 px-4 rounded-lg font-semibold transition-colors mb-6 @(plan.IsPopular ? "bg-primary-600 text-white hover:bg-primary-700" : "bg-gray-100 text-gray-900 hover:bg-gray-200")">
                        @plan.ButtonText
                    </button>
                    
                    <ul class="space-y-3">
                        @foreach (var feature in plan.Features)
                        {
                            <li class="flex items-start space-x-3">
                                <svg class="w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                </svg>
                                <span class="text-gray-700">@feature</span>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

<!-- Testimonials Section -->
<div class="py-16 bg-gray-50">
    <div class="container mx-auto px-6">
        <h2 class="text-3xl font-bold text-center text-gray-900 mb-12">Testimonies</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            @foreach (var testimonial in testimonials)
            {
                <div class="bg-white rounded-lg p-6 shadow-lg border border-gray-100 hover:shadow-xl transition-shadow">
                    <div class="flex items-center mb-4">
                        <img src="@testimonial.AvatarUrl" alt="@testimonial.Name" class="w-12 h-12 rounded-full object-cover mr-4">
                        <div>
                            <h4 class="font-semibold text-gray-900">@testimonial.Name</h4>
                            <div class="flex items-center space-x-1">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <svg class="w-4 h-4 @(i <= testimonial.Rating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                    </svg>
                                }
                                <span class="text-sm text-gray-600 ml-1">@testimonial.Rating.ToString("F1")</span>
                            </div>
                        </div>
                    </div>
                    
                    <blockquote class="text-gray-700 italic">
                        "@testimonial.Content"
                    </blockquote>
                </div>
            }
        </div>
    </div>
</div>
        

@code {
    private List<Category> categories = new();
    private List<CourseDisplayDto> topCourses = new();
    private List<ELearningApp.Models.DTOs.Company> trustedCompanies = new();
    private List<ELearningApp.Models.DTOs.PricingPlan> pricingPlans = new();
    private List<ELearningApp.Models.DTOs.Testimonial> testimonials = new();
    private string searchTerm = string.Empty;
    private bool isLoading = false;
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Home: Starting OnInitializedAsync");
            isLoading = true;
            StateHasChanged();
            
            Console.WriteLine("Home: Loading categories");
            categories = DataService.GetCategories();
            Console.WriteLine($"Home: Loaded {categories.Count} categories");
            
            Console.WriteLine("Home: Loading courses from service");
            var realCourses = await CourseService.GetPublishedCoursesAsync(); // Changed from GetAllCoursesAsync
            Console.WriteLine($"Home: Retrieved {realCourses.Count()} published courses from service");
            
            Console.WriteLine("Home: Mapping courses to DTOs");
            topCourses = realCourses.Take(3).Select(c => {
                try 
                {
                    Console.WriteLine($"Home: Mapping course {c.Id}: {c.Title}");
                    return new CourseDisplayDto
                    {
                        Id = c.Id,
                        Title = c.Title ?? "Untitled Course",
                        Description = c.ShortDescription ?? "No description available",
                        InstructorName = (c.Instructor != null) ? $"{c.Instructor.FirstName} {c.Instructor.LastName}".Trim() : "No Instructor",
                        InstructorId = c.InstructorId ?? "",
                        InstructorProfileImageUrl = c.Instructor?.ProfileImageUrl,
                        ImageUrl = c.ImageUrl ?? "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                        Rating = c.AverageRating,
                        ReviewCount = c.ReviewCount,
                        Duration = c.EstimatedDurationMinutes > 0 ? $"{c.EstimatedDurationMinutes / 60}h {c.EstimatedDurationMinutes % 60}m" : "Duration not specified",
                        IsBestseller = c.ReviewCount > 50000 && c.AverageRating >= 4.5,
                        CategoryId = c.CategoryId ?? 0,
                        Level = c.Level.ToString()
                    };
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Home: Error mapping course {c.Id}: {ex.Message}");
                    // Return a safe default course
                    return new CourseDisplayDto
                    {
                        Id = c.Id,
                        Title = "Course Title Error",
                        Description = "Error loading course description",
                        InstructorName = "Unknown Instructor",
                        InstructorId = "",
                        InstructorProfileImageUrl = null,
                        ImageUrl = "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                        Rating = 0,
                        ReviewCount = 0,
                        Duration = "Duration not available",
                        IsBestseller = false,
                        CategoryId = 0,
                        Level = "Beginner"
                    };
                }
            }).ToList();
            
            Console.WriteLine($"Home: Successfully mapped {topCourses.Count} courses");
            
            Console.WriteLine("Home: Loading static data");
            trustedCompanies = DataService.GetTrustedCompanies();
            pricingPlans = DataService.GetPricingPlans();
            testimonials = DataService.GetTestimonials();
            Console.WriteLine("Home: Static data loaded successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Home: Critical error in OnInitializedAsync: {ex.Message}");
            Console.WriteLine($"Home: Stack trace: {ex.StackTrace}");
            
            // Fallback to safe defaults
            categories = DataService.GetCategories();
            topCourses = new List<CourseDisplayDto>();
            trustedCompanies = DataService.GetTrustedCompanies();
            pricingPlans = DataService.GetPricingPlans();
            testimonials = DataService.GetTestimonials();
        }
        finally
        {
            Console.WriteLine("Home: Finishing OnInitializedAsync");
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewCourse(int courseId)
    {
        try
        {
            Navigation.NavigateTo($"/course/{courseId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }

    private void ViewInstructor(string instructorId)
    {
        try
        {
            if (!string.IsNullOrEmpty(instructorId))
            {
                Navigation.NavigateTo($"/instructor/{instructorId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Instructor navigation error: {ex.Message}");
        }
    }

    private void ViewCoursesByCategory(int categoryId)
    {
        try
        {
            Navigation.NavigateTo($"/courses?category={categoryId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        try
        {
            isSearching = true;
            StateHasChanged();

            // Add a small delay to show the loading state
            await Task.Delay(100);
            
            Navigation.NavigateTo($"/courses?search={Uri.EscapeDataString(searchTerm.Trim())}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Search navigation error: {ex.Message}");
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchTerm))
        {
            await Search();
        }
    }
}
