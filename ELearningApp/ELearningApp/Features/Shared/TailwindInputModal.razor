@* TailwindInputModal.razor: A reusable modal for text input (e.g., module/lesson title) *@
@if (Show)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center" style="background: rgba(0,0,0,0.3);">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6 relative animate-fade-in">
            <div class="mb-4">
                <h3 class="text-lg font-semibold text-gray-900">@Title</h3>
            </div>
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">@Label</label>
                <input class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                       @bind="InputValue" @bind:event="oninput" placeholder="@Placeholder" />
                @if (!string.IsNullOrEmpty(Error))
                {
                    <div class="text-red-500 text-xs mt-1">@Error</div>
                }
            </div>
            <div class="flex justify-end space-x-2">
                <button class="px-4 py-2 rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500" @onclick="OnCancel">@CancelText</button>
                <button class="px-4 py-2 rounded-md bg-blue-600 text-white font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500" @onclick="OnOk">@OkText</button>
            </div>
            <button class="absolute top-2 right-2 text-gray-400 hover:text-gray-600" @onclick="OnCancel">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public string InitialValue { get; set; } = "";
    [Parameter] public string OkText { get; set; } = "OK";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public EventCallback<(bool, string)> OnClose { get; set; }
    [Parameter] public Func<string, string?>? Validate { get; set; }

    private string InputValue = "";
    private string Error = "";

    protected override void OnParametersSet()
    {
        InputValue = InitialValue ?? "";
        Error = "";
    }

    private async Task OnOk()
    {
        Error = Validate?.Invoke(InputValue) ?? "";
        if (!string.IsNullOrEmpty(Error))
            return;
        await OnClose.InvokeAsync((true, InputValue));
    }
    private async Task OnCancel()
    {
        await OnClose.InvokeAsync((false, InitialValue ?? ""));
    }
} 