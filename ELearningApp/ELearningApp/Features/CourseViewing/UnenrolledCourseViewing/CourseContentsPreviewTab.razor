@using ELearningApp.Models.Entities
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@inject ICourseService CourseService
@inject IUserService UserService

<div class="space-y-4">
    <!-- Course Contents List -->
    @if (Course?.Modules?.Any() == true)
    {
        @foreach (var module in Course.Modules.OrderBy(m => m.OrderIndex))
        {
            <div class="border border-gray-200 rounded-lg overflow-hidden">
                <!-- Module Header -->
                <div class="bg-gray-50 px-4 py-3 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h3 class="font-medium text-gray-900">@module.Title</h3>
                        <span class="text-sm text-gray-500">
                            @module.Lessons?.Count() lesson@(module.Lessons?.Count() != 1 ? "s" : "")
                        </span>
                    </div>
                    @if (!string.IsNullOrEmpty(module.Description))
                    {
                        <p class="text-sm text-gray-600 mt-1">@module.Description</p>
                    }
                </div>

                <!-- Lessons List -->
                <div class="divide-y divide-gray-100">
                    @if (module.Lessons?.Any() == true)
                    {
                        @foreach (var lesson in module.Lessons.OrderBy(l => l.OrderIndex))
                        {
                            var canAccess = IsEnrolled || lesson.IsFree;
                            var isLocked = !canAccess;
                            
                            <div class="px-4 py-3 @(isLocked ? "bg-gray-50" : "")">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-3">
                                        <!-- Lesson Type Icon -->
                                        <div class="flex-shrink-0">
                                            @if (lesson.Type == LessonType.Video)
                                            {
                                                <div class="w-6 h-6 bg-red-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-3 h-3 text-red-600" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                                                    </svg>
                                                </div>
                                            }
                                            else if (lesson.Type == LessonType.Article)
                                            {
                                                <div class="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-3 h-3 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path>
                                                    </svg>
                                                </div>
                                            }
                                            else if (lesson.Type == LessonType.Quiz)
                                            {
                                                <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-3 h-3 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                                                    </svg>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-3 h-3 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path>
                                                    </svg>
                                                </div>
                                            }
                                        </div>

                                        <!-- Lesson Info -->
                                        <div class="flex-1 min-w-0">
                                            <p class="text-sm font-medium @(isLocked ? "text-gray-400" : "text-gray-900")">@lesson.Title</p>
                                            @if (!string.IsNullOrEmpty(lesson.Description))
                                            {
                                                <p class="text-xs @(isLocked ? "text-gray-300" : "text-gray-500") mt-1">@lesson.Description</p>
                                            }
                                        </div>
                                    </div>

                                    <div class="flex items-center space-x-3">
                                        <!-- Duration -->
                                        @if (lesson.DurationMinutes > 0)
                                        {
                                            <span class="text-xs @(isLocked ? "text-gray-300" : "text-gray-500")">@lesson.DurationMinutes min</span>
                                        }

                                        <!-- Access Status -->
                                        @if (lesson.IsFree)
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                Preview
                                            </span>
                                        }
                                        else if (IsEnrolled)
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                Unlocked
                                            </span>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
                                            </svg>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="px-4 py-6 text-center text-gray-500">
                            <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                            </svg>
                            <p class="text-sm">No lessons in this module yet.</p>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Course Summary for Enrolled Users -->
        @if (IsEnrolled)
        {
            <div class="mt-8 bg-green-50 border border-green-200 rounded-lg p-6 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
                    <svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">You're Enrolled!</h3>
                <p class="text-gray-600 mb-4">
                    You have full access to all course materials. Start learning now!
                </p>
                <button @onclick="OnStartLearning"
                        class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    Start Learning
                </button>
            </div>
        }
        else
        {
            <!-- Enrollment Call-to-Action for Unenrolled Users -->
            <div class="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 mb-4">
                    <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Enroll to Access Full Course Content</h3>
                <p class="text-gray-600 mb-4">
                    Get lifetime access to all course materials, including videos, articles, quizzes, and downloadable resources.
                </p>
                <button @onclick="OnEnrollClick"
                        class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    Enroll Now
                </button>
            </div>
        }
    }
    else
    {
        <!-- No modules found -->
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No Course Content Available</h3>
            <p class="mt-1 text-sm text-gray-500">This course doesn't have any modules or lessons yet.</p>
        </div>
    }
</div>

@code {
    [Parameter] public Course Course { get; set; } = null!;
    [Parameter] public EventCallback OnEnrollClick { get; set; }
    [Parameter] public EventCallback OnStartLearning { get; set; }

    private bool IsEnrolled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckEnrollmentStatus();
    }

    protected override async Task OnParametersSetAsync()
    {
        await CheckEnrollmentStatus();
    }

    private async Task CheckEnrollmentStatus()
    {
        try
        {
            if (Course != null)
            {
                var currentUser = await UserService.GetCurrentUserAsync();
                if (currentUser != null)
                {
                    IsEnrolled = await CourseService.IsStudentEnrolledAsync(Course.Id, currentUser.Id);
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            // If there's an error checking enrollment, assume not enrolled for safety
            IsEnrolled = false;
        }
    }
}