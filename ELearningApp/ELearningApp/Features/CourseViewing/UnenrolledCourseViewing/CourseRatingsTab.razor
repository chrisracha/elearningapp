@using ELearningApp.Models.Entities
@using ELearningApp.Models.Enums

<div class="space-y-6">
    <!-- Student Feedback Overview -->
    <div class="bg-gray-50 p-6 rounded-lg">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Student Feedback</h3>
        
        <div class="flex items-center space-x-8">
            <!-- Overall Rating -->
            <div class="text-center">
                <div class="text-4xl font-bold text-gray-900 mb-2">@AverageRating.ToString("F1")</div>
                <div class="flex items-center justify-center mb-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <svg class="w-5 h-5 @(i <= AverageRating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                        </svg>
                    }
                </div>
                <div class="text-sm text-gray-600">Course Rating</div>
            </div>

            <!-- Rating Breakdown -->
            <div class="flex-1 space-y-2">
                @for (int star = 5; star >= 1; star--)
                {
                    var percentage = GetRatingPercentage(star);
                    <div class="flex items-center space-x-3">
                        <div class="flex items-center space-x-1 w-20">
                            @for (int i = 1; i <= star; i++)
                            {
                                <svg class="w-3 h-3 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                </svg>
                            }
                        </div>
                        <div class="flex-1 bg-gray-200 rounded-full h-2">
                            <div class="bg-yellow-400 h-2 rounded-full transition-all duration-300" style="width: @(percentage)%"></div>
                        </div>
                        <div class="text-sm text-gray-600 w-12">@(percentage)%</div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Reviews Section -->
    <div>
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-lg font-semibold text-gray-900">Reviews</h3>
            <div class="flex items-center space-x-4">
                <!-- Search Reviews -->
                <div class="relative">
                    <input @bind="searchTerm" @bind:event="oninput" @onkeypress="OnSearchKeyPress"
                           type="text" 
                           placeholder="Search Reviews" 
                           class="pl-8 pr-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <!-- Search Button -->
                <button @onclick="SearchReviews"
                        class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    Search
                </button>

                <!-- Filter Ratings -->
                <select @bind="ratingFilter"
                        class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500">
                    <option value="">All ratings</option>
                    <option value="5">5 stars</option>
                    <option value="4">4 stars</option>
                    <option value="3">3 stars</option>
                    <option value="2">2 stars</option>
                    <option value="1">1 star</option>
                </select>
            </div>
        </div>

        <!-- Reviews List -->
        <div class="space-y-6">
            @if (filteredReviews.Any())
            {
                @foreach (var review in filteredReviews)
                {
                    <div class="border-b border-gray-200 pb-6 last:border-b-0">
                        <div class="flex items-start space-x-4">
                            <!-- User Avatar -->
                            <div class="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                                @if (!string.IsNullOrEmpty(review.Student?.ProfileImageUrl))
                                {
                                    <img src="@review.Student.ProfileImageUrl" alt="@review.Student.FirstName" class="w-full h-full object-cover rounded-full">
                                }
                                else
                                {
                                    <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                                    </svg>
                                }
                            </div>

                            <div class="flex-1">
                                <!-- Review Header -->
                                <div class="flex items-center justify-between mb-2">
                                    <div>
                                        <h4 class="font-medium text-gray-900">@(review.Student?.FirstName ?? "User")</h4>
                                        <div class="flex items-center space-x-2">
                                            <div class="flex items-center">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <svg class="w-4 h-4 @(i <= review.Rating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                    </svg>
                                                }
                                            </div>
                                            <span class="text-sm text-gray-500">@review.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Review Content -->
                                @if (!string.IsNullOrEmpty(review.ReviewText))
                                {
                                    <p class="text-gray-700 text-sm leading-relaxed">@review.ReviewText</p>
                                }
                                else
                                {
                                    <p class="text-gray-700 text-sm leading-relaxed">Awesome... Wow!</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <!-- Sample Reviews (when no real reviews exist) -->
                <div class="border-b border-gray-200 pb-6">
                    <div class="flex items-start space-x-4">
                        <div class="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex items-center justify-between mb-2">
                                <div>
                                    <h4 class="font-medium text-gray-900">User</h4>
                                    <div class="flex items-center space-x-2">
                                        <div class="flex items-center">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                </svg>
                                            }
                                        </div>
                                        <span class="text-sm text-gray-500">6 years ago</span>
                                    </div>
                                </div>
                            </div>
                            <p class="text-gray-700 text-sm leading-relaxed">Awesome... Wow!</p>
                        </div>
                    </div>
                </div>

                <div class="border-b border-gray-200 pb-6">
                    <div class="flex items-start space-x-4">
                        <div class="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex items-center justify-between mb-2">
                                <div>
                                    <h4 class="font-medium text-gray-900">User</h4>
                                    <div class="flex items-center space-x-2">
                                        <div class="flex items-center">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                </svg>
                                            }
                                        </div>
                                        <span class="text-sm text-gray-500">4 years ago</span>
                                    </div>
                                </div>
                            </div>
                            <p class="text-gray-700 text-sm leading-relaxed">Awesome... Wow!</p>
                        </div>
                    </div>
                </div>

                <div class="border-b border-gray-200 pb-6">
                    <div class="flex items-start space-x-4">
                        <div class="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex items-center justify-between mb-2">
                                <div>
                                    <h4 class="font-medium text-gray-900">User</h4>
                                    <div class="flex items-center space-x-2">
                                        <div class="flex items-center">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                </svg>
                                            }
                                        </div>
                                        <span class="text-sm text-gray-500">6 years ago</span>
                                    </div>
                                </div>
                            </div>
                            <p class="text-gray-700 text-sm leading-relaxed">Awesome... Wow!</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int CourseId { get; set; }
    [Parameter] public double AverageRating { get; set; }
    [Parameter] public int TotalRatings { get; set; }

    private List<CourseReview> reviews = new();
    private List<CourseReview> filteredReviews = new();
    private string searchTerm = string.Empty;
    private string _ratingFilter = string.Empty;
    private string ratingFilter 
    { 
        get => _ratingFilter; 
        set 
        { 
            _ratingFilter = value; 
            _ = FilterReviews(); 
        } 
    }

    protected override async Task OnInitializedAsync()
    {
        // TODO: Load actual reviews from the service
        // For now, using sample data
        filteredReviews = reviews;
    }

    private int GetRatingPercentage(int starRating)
    {
        // Sample rating distribution for demonstration
        return starRating switch
        {
            5 => 70,
            4 => 20,
            3 => 5,
            2 => 3,
            1 => 2,
            _ => 0
        };
    }

    private Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            return FilterReviews();
        }
        return Task.CompletedTask;
    }

    private Task SearchReviews()
    {
        return FilterReviews();
    }

    private Task FilterReviews()
    {
        filteredReviews = reviews;

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredReviews = filteredReviews
                .Where(r => r.ReviewText?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true)
                .ToList();
        }

        if (!string.IsNullOrEmpty(ratingFilter) && int.TryParse(ratingFilter, out int rating))
        {
            filteredReviews = filteredReviews
                .Where(r => r.Rating == rating)
                .ToList();
        }

        StateHasChanged();
        return Task.CompletedTask;
    }
} 