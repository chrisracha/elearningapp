@using Microsoft.JSInterop
@using System.Web

<div class="relative w-full h-full bg-gray-900 rounded-lg overflow-hidden">
    @if (!string.IsNullOrEmpty(ExtractedVideoId))
    {
        <!-- YouTube Embed -->
        <div class="w-full h-full">
            <iframe src="https://www.youtube.com/embed/@ExtractedVideoId?enablejsapi=1&rel=0&modestbranding=1" 
                    class="w-full h-full" 
                    frameborder="0" 
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                    allowfullscreen>
            </iframe>
        </div>
    }
    else
    {
        <!-- Placeholder Video Area -->
        <div class="w-full h-full flex items-center justify-center bg-gray-800">
            <div class="text-center text-white">
                <div class="text-gray-400 text-4xl mb-4">320x240</div>
                <h3 class="text-lg font-medium mb-2">@CourseTitle</h3>
                <p class="text-sm text-gray-300">Video Preview</p>
                
                <!-- Placeholder Play Button -->
                <button class="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mx-auto mt-4 hover:bg-opacity-30 transition-all">
                    <svg class="w-6 h-6 text-white ml-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                    </svg>
                </button>
                
                <!-- Placeholder Controls -->
                <div class="mt-4 flex items-center justify-center space-x-4">
                    <button class="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center hover:bg-opacity-30 transition-all">
                        <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                    
                    <button class="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center hover:bg-opacity-30 transition-all">
                        <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                    
                    <button class="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center hover:bg-opacity-30 transition-all">
                        <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L11.414 9l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 9l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                    
                    <div class="flex-1 h-1 bg-white bg-opacity-20 rounded max-w-32">
                        <div class="h-1 bg-white rounded" style="width: 30%"></div>
                    </div>
                    
                    <button class="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center hover:bg-opacity-30 transition-all">
                        <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H6.414l2.293 2.293a1 1 0 11-1.414 1.414L5 6.414V8a1 1 0 11-2 0V4zm9 1a1 1 0 010-2h4a1 1 0 011 1v4a1 1 0 11-2 0V6.414l-2.293 2.293a1 1 0 11-1.414-1.414L13.586 5H12zm-9 7a1 1 0 112 0v1.586l2.293-2.293a1 1 0 111.414 1.414L6.414 15H8a1 1 0 110 2H4a1 1 0 01-1-1v-4zm13-1a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 110-2h1.586l-2.293-2.293a1 1 0 111.414-1.414L15.586 13V12a1 1 0 011-1z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string YouTubeVideoId { get; set; } = string.Empty;
    [Parameter] public string CourseTitle { get; set; } = string.Empty;

    private string ExtractedVideoId => ExtractYouTubeVideoId(YouTubeVideoId);

    private string ExtractYouTubeVideoId(string input)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;

        // If it's already a clean video ID (11 characters, alphanumeric with hyphens/underscores)
        if (input.Length == 11 && System.Text.RegularExpressions.Regex.IsMatch(input, @"^[a-zA-Z0-9_-]{11}$"))
            return input;

        // If it's a URL, extract the video ID
        try
        {
            var uri = new Uri(input);
            
            // Standard YouTube watch URL (youtube.com/watch?v=VIDEO_ID)
            if (uri.Host.Contains("youtube.com") && uri.AbsolutePath == "/watch")
            {
                var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                return query["v"] ?? string.Empty;
            }
            
            // YouTube short URL (youtu.be/VIDEO_ID)
            if (uri.Host.Contains("youtu.be"))
            {
                var segments = uri.AbsolutePath.TrimStart('/').Split('?');
                return segments.Length > 0 ? segments[0] : string.Empty;
            }
            
            // YouTube embed URL (youtube.com/embed/VIDEO_ID)
            if (uri.Host.Contains("youtube.com") && uri.AbsolutePath.StartsWith("/embed/"))
            {
                var videoId = uri.AbsolutePath.Replace("/embed/", "").Split('?')[0];
                return videoId;
            }
            
            // YouTube URL with additional parameters
            if (uri.Host.Contains("youtube.com") && uri.Query.Contains("v="))
            {
                var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                return query["v"] ?? string.Empty;
            }
            
            return string.Empty;
        }
        catch
        {
            // Fallback: try to extract video ID using regex
            try
            {
                var patterns = new[]
                {
                    @"(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]{11})",
                    @"youtube\.com\/.*[?&]v=([a-zA-Z0-9_-]{11})",
                    @"youtu\.be\/([a-zA-Z0-9_-]{11})"
                };
                
                foreach (var pattern in patterns)
                {
                    var match = System.Text.RegularExpressions.Regex.Match(input, pattern);
                    if (match.Success && match.Groups.Count > 1)
                    {
                        return match.Groups[1].Value;
                    }
                }
            }
            catch
            {
                // If all else fails, return the original input (might be a clean video ID)
            }
            
            return string.Empty;
        }
    }
}