@using ELearningApp.Models.Entities
@using ELearningApp.Models.Enums

<!-- Full container article viewer -->
@if (Lesson != null)
{
    <!-- Article Content Container - Full Width/Height -->
    <div class="w-full h-full bg-white overflow-hidden flex flex-col">
        <!-- Article Content -->
        <div class="flex-1 p-8 overflow-y-auto">
            <article class="prose prose-lg max-w-none">
                <h1 class="text-2xl font-bold text-gray-900 mb-4">@Lesson.Title</h1>
                
                @if (!string.IsNullOrEmpty(Lesson.Description))
                {
                    <p class="text-gray-600 mb-6 italic">@Lesson.Description</p>
                }

                @if (!string.IsNullOrEmpty(Lesson.Content))
                {
                    <div class="text-gray-900 leading-relaxed">
                        @((MarkupString)Lesson.Content)
                    </div>
                }
                else if (!string.IsNullOrEmpty(Lesson.ArticleUrl))
                {
                    <div class="text-center text-gray-500 py-12">
                        <svg class="mx-auto h-16 w-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                        </svg>
                        <h3 class="text-lg font-medium">External Article</h3>
                        <p class="text-sm text-gray-500 mb-4">This article is hosted externally</p>
                        <a href="@Lesson.ArticleUrl" target="_blank" rel="noopener noreferrer"
                           class="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                            </svg>
                            Read Article
                        </a>
                    </div>
                }
                else
                {
                    <div class="text-center text-gray-500 py-12">
                        <svg class="mx-auto h-16 w-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        <h3 class="text-lg font-medium">No Article Content</h3>
                        <p class="text-sm">This lesson doesn't have article content yet.</p>
                    </div>
                }
            </article>
        </div>
        
        <!-- Article Info and Controls - Bottom -->
        <div class="border-t border-gray-200 p-4 bg-gray-50">
            <div class="flex items-center justify-between">
                <div class="text-sm text-gray-600">
                    @if (Lesson.DurationMinutes > 0)
                    {
                        <span>Estimated reading time: @Lesson.DurationMinutes minutes</span>
                    }
                    <span class="ml-4 text-xs text-gray-500">Article Lesson</span>
                </div>
                
                <button @onclick="MarkCompleted" disabled="@isMarkingComplete"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isMarkingComplete)
                    {
                        <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Marking...</span>
                    }
                    else
                    {
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span>Mark Complete</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Lesson? Lesson { get; set; }
    [Parameter] public EventCallback<int> OnCompleted { get; set; }

    private bool isMarkingComplete = false;

    private async Task MarkCompleted()
    {
        if (Lesson != null && !isMarkingComplete)
        {
            try
            {
                isMarkingComplete = true;
                StateHasChanged();
                
                Console.WriteLine($"Marking article lesson {Lesson.Id} as complete...");
                await OnCompleted.InvokeAsync(Lesson.Id);
                Console.WriteLine($"Article lesson {Lesson.Id} marked as complete successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error marking article lesson complete: {ex.Message}");
            }
            finally
            {
                isMarkingComplete = false;
                StateHasChanged();
            }
        }
    }
}