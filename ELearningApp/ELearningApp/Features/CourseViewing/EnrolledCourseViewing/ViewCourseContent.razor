@page "/course/{courseId:int}/learn"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@using ELearningApp.Features.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ICourseService CourseService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>@(course?.Title ?? "Loading...") - E-Learning Platform</PageTitle>

<TailwindModal Show="@showModal" Title="@modalTitle" Message="@modalMessage" OkText="@modalOkText" CancelText="@modalCancelText" ShowCancel="@modalShowCancel" Icon="@modalIcon" OnClose="OnModalClose" />

<div class="min-h-screen bg-gray-50">
    @if (isLoading)
    {
        <div class="flex justify-center items-center min-h-screen">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
        </div>
    }
    else if (course != null && isEnrolled)
    {
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="grid grid-cols-1 lg:grid-cols-5 gap-6">
                
                <!-- Main Content Area -->
                <div class="lg:col-span-3">
                    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
                        
                        <!-- Video/Content Player Area -->
                        <div class="bg-gray-900 aspect-video flex items-center justify-center relative">
                            @if (selectedLesson != null)
                            {
                                @if (selectedLesson.Type == LessonType.Video)
                                {
                                    <ViewVideo Lesson="selectedLesson" OnCompleted="OnLessonCompleted" />
                                }
                                else if (selectedLesson.Type == LessonType.Article)
                                {
                                    <div class="w-full h-full bg-white p-8 overflow-y-auto">
                                        <ViewArticle Lesson="selectedLesson" OnCompleted="OnLessonCompleted" />
                                    </div>
                                }
                            }
                            else
                            {
                                <!-- Course Overview when no lesson selected -->
                                <div class="text-center text-white p-8">
                                    <div class="bg-gradient-to-r from-primary-600 to-primary-700 rounded-lg p-8">
                                        <h2 class="text-2xl font-bold mb-4">@course.Title</h2>
                                        <p class="text-primary-100 mb-6">@course.ShortDescription</p>
                                        <div class="flex items-center justify-center space-x-6 text-primary-100">
                                            <div class="text-center">
                                                <div class="text-2xl font-bold">@((int)progressPercentage)%</div>
                                                <div class="text-sm">Complete</div>
                                            </div>
                                            <div class="text-center">
                                                <div class="text-2xl font-bold">@course.EstimatedDurationMinutes</div>
                                                <div class="text-sm">Minutes</div>
                                            </div>
                                            <div class="text-center">
                                                <div class="text-2xl font-bold">@course.Modules?.Count()</div>
                                                <div class="text-sm">Modules</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Content Tabs -->
                        <div class="border-b border-gray-200">
                            <nav class="flex space-x-8 px-6" aria-label="Tabs">
                                <button @onclick="() => SetActiveTab(ContentTab.Content)"
                                        class="@GetTabClasses(ContentTab.Content) py-4 px-1 border-b-2 font-medium text-sm">
                                    Overview
                                </button>
                                <button @onclick="() => SetActiveTab(ContentTab.Announcements)"
                                        class="@GetTabClasses(ContentTab.Announcements) py-4 px-1 border-b-2 font-medium text-sm">
                                    Announcements
                                </button>
                                <button @onclick="() => SetActiveTab(ContentTab.Reviews)"
                                        class="@GetTabClasses(ContentTab.Reviews) py-4 px-1 border-b-2 font-medium text-sm">
                                    Reviews
                                </button>
                            </nav>
                        </div>

                        <!-- Tab Content -->
                        <div class="p-6">
                            @if (activeTab == ContentTab.Content)
                            {
                                @if (selectedLesson != null)
                                {
                                    <!-- Selected Lesson Details -->
                                    <div class="mb-6">
                                        <div class="flex items-center justify-between mb-4">
                                            <h2 class="text-xl font-semibold text-gray-900">@selectedLesson.Title</h2>
                                            <button @onclick="() => selectedLesson = null" 
                                                    class="text-gray-400 hover:text-gray-600">
                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                                </svg>
                                            </button>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(selectedLesson.Description))
                                        {
                                            <p class="text-gray-600 mb-4">@selectedLesson.Description</p>
                                        }

                                        <div class="flex items-center space-x-4 text-sm text-gray-500">
                                            <span class="flex items-center">
                                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                                                </svg>
                                                @selectedLesson.DurationMinutes min
                                            </span>
                                            <span class="flex items-center">
                                                @if (selectedLesson.Type == LessonType.Video)
                                                {
                                                    <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    <span>Video Lesson</span>
                                                }
                                                else if (selectedLesson.Type == LessonType.Article)
                                                {
                                                    <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    <span>Article</span>
                                                }
                                            </span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <!-- Course Overview -->
                                    <div class="mb-6">
                                        <h2 class="text-xl font-semibold text-gray-900 mb-4">Course Overview</h2>
                                        <div class="prose prose-gray max-w-none">
                                            <p class="text-gray-700 leading-relaxed">@course.LongDescription</p>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(course.WhatYouWillLearn))
                                        {
                                            <div class="mt-6">
                                                <h3 class="font-semibold text-gray-900 mb-3">What You'll Learn</h3>
                                                <div class="bg-gray-50 p-4 rounded-lg">
                                                    <div class="space-y-2">
                                                        @foreach (var item in course.WhatYouWillLearn.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                                                        {
                                                            <div class="flex items-start">
                                                                <svg class="w-4 h-4 mr-3 mt-0.5 text-green-500 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                                                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                                                </svg>
                                                                <span class="text-sm text-gray-700">@item.Trim()</span>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else if (activeTab == ContentTab.Announcements)
                            {
                                <ViewAnnouncementTab CourseId="course.Id" />
                            }
                            else if (activeTab == ContentTab.Reviews)
                            {
                                <ViewReviewsTab CourseId="course.Id" />
                            }
                        </div>
                    </div>
                </div>

                <!-- Sidebar - Course Contents -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg shadow-lg overflow-hidden sticky top-6">
                        <div class="bg-gray-50 px-4 py-3 border-b border-gray-200">
                            <h3 class="text-lg font-semibold text-gray-900">Course Contents</h3>
                        </div>
                        
                        <div class="max-h-[600px] overflow-y-auto">
                            <ViewCourseModules Course="course" OnLessonSelected="SelectLesson" />
                        </div>
                        
                        <!-- Progress and Quick Actions -->
                        <div class="border-t border-gray-200 p-4">
                            <div class="mb-4">
                                <div class="flex items-center justify-between text-sm mb-1">
                                    <span class="text-gray-600">Course Progress</span>
                                    <span class="text-gray-900 font-medium">@((int)progressPercentage)%</span>
                                </div>
                                <div class="bg-gray-200 rounded-full h-2">
                                    <div class="bg-primary-600 h-2 rounded-full transition-all duration-300" 
                                         style="width: @(progressPercentage)%"></div>
                                </div>
                            </div>
                            
                            <div class="space-y-2">
                                <button @onclick="ShowCertificate"
                                        disabled="@(progressPercentage < 100)"
                                        class="w-full px-3 py-2 text-sm font-medium rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed @(progressPercentage >= 100 ? "bg-green-600 text-white hover:bg-green-700" : "bg-gray-100 text-gray-400")">
                                    @if (progressPercentage >= 100)
                                    {
                                        <span>🏆 Get Certificate</span>
                                    }
                                    else
                                    {
                                        <span>🏆 Certificate (Complete Course)</span>
                                    }
                                </button>
                                <a href="/dashboard" class="block w-full text-center px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors">
                                    📊 Back to Dashboard
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!isEnrolled)
    {
        <div class="max-w-4xl mx-auto p-6">
            <div class="bg-white rounded-lg shadow-lg p-8 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                    <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                </div>
                <h2 class="text-xl font-semibold text-gray-900 mb-2">Access Denied</h2>
                <p class="text-gray-600 mb-6">You are not enrolled in this course.</p>
                <a href="/course/@CourseId" 
                   class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                    View Course Details
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="max-w-4xl mx-auto p-6">
            <div class="bg-white rounded-lg shadow-lg p-8 text-center">
                <h2 class="text-xl font-semibold text-gray-900 mb-2">Course Not Found</h2>
                <p class="text-gray-600 mb-6">The course you're looking for doesn't exist.</p>
                <a href="/catalog" 
                   class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                    Browse Courses
                </a>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int CourseId { get; set; }

    private Course? course;
    private Lesson? selectedLesson;
    private bool isLoading = true;
    private bool isEnrolled = false;
    private double progressPercentage = 0;
    private ContentTab activeTab = ContentTab.Content;

    private enum ContentTab
    {
        Content,
        Announcements,
        Reviews
    }

    // Modal state
    private bool showModal = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private string modalOkText = "OK";
    private string modalCancelText = "Cancel";
    private bool modalShowCancel = false;
    private string modalIcon = "";
    private Func<bool, Task>? modalCallback;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourseData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLoading && course == null)
        {
            // If course failed to load during initialization, try again after render
            await LoadCourseData();
        }
    }

    private async Task LoadCourseData()
    {
        try
        {
            isLoading = true;
            course = await CourseService.GetCourseWithDetailsAsync(CourseId);
            
            if (course != null)
            {
                var currentUser = await UserService.GetCurrentUserAsync();
                if (currentUser != null)
                {
                    isEnrolled = await CourseService.IsStudentEnrolledAsync(CourseId, currentUser.Id);
                    if (isEnrolled)
                    {
                        progressPercentage = await CourseService.GetCourseProgressAsync(CourseId, currentUser.Id);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Don't call JS during prerendering
            Console.WriteLine($"Error loading course: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetActiveTab(ContentTab tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private string GetTabClasses(ContentTab tab)
    {
        return activeTab == tab 
            ? "border-primary-500 text-primary-600" 
            : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300";
    }

    private void SelectLesson(Lesson lesson)
    {
        try
        {
            Console.WriteLine($"Selecting lesson: {lesson.Title} (ID: {lesson.Id})");
            selectedLesson = lesson;
            // Automatically switch to content tab when lesson is selected
            activeTab = ContentTab.Content;
            StateHasChanged();
            Console.WriteLine($"Lesson selected successfully. selectedLesson is now: {selectedLesson?.Title}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error selecting lesson: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task OnLessonCompleted(int lessonId)
    {
        // TODO: Implement lesson completion tracking
        Console.WriteLine("Lesson completed! (Progress tracking will be implemented in Phase 2)");
        await LoadCourseData(); // Refresh progress
    }

    private async Task ShowCertificate()
    {
        if (progressPercentage >= 100)
        {
            await ShowSuccessModal("🎉 Congratulations! Certificate generation will be implemented in Phase 2");
        }
    }

    private Task ShowSuccessModal(string message)
    {
        modalTitle = "Success";
        modalMessage = message;
        modalOkText = "OK";
        modalShowCancel = false;
        modalIcon = "<svg class='w-6 h-6 text-green-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 13l4 4L19 7'/></svg>";
        showModal = true;
        modalCallback = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnModalClose(bool ok)
    {
        showModal = false;
        StateHasChanged();
        if (modalCallback != null)
        {
            await modalCallback(ok);
        }
    }
}