@using ELearningApp.Models.Entities
@using ELearningApp.Services
@inject ICourseService CourseService
@inject IJSRuntime JS

<div class="space-y-6">
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-8">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
        </div>
    }
    else if (reviews.Any())
    {
        <!-- Reviews Summary -->
        <div class="bg-gray-50 rounded-lg p-6 mb-6">
            <div class="flex items-center justify-between">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Student Reviews</h3>
                    <div class="flex items-center space-x-4">
                        <div class="flex items-center">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <svg class="w-5 h-5 @(i <= averageRating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                </svg>
                            }
                            <span class="ml-2 text-lg font-semibold text-gray-900">@averageRating.ToString("F1")</span>
                        </div>
                        <div class="text-sm text-gray-600">
                            Based on @reviews.Count review@(reviews.Count != 1 ? "s" : "")
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Individual Reviews -->
        @foreach (var review in reviews)
        {
            <div class="bg-white border border-gray-200 rounded-lg p-6 shadow-sm">
                <div class="flex items-start space-x-4">
                    <!-- Reviewer Avatar -->
                    <div class="flex-shrink-0">
                        <div class="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                            @if (!string.IsNullOrEmpty(review.Student?.ProfileImageUrl))
                            {
                                <img src="@review.Student.ProfileImageUrl" alt="@GetReviewerName(review)" class="w-10 h-10 rounded-full object-cover">
                            }
                            else
                            {
                                <svg class="w-6 h-6 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                                </svg>
                            }
                        </div>
                    </div>

                    <!-- Review Content -->
                    <div class="flex-1">
                        <div class="flex items-center justify-between mb-2">
                            <div class="flex items-center space-x-2">
                                <h4 class="font-semibold text-gray-900">@GetReviewerName(review)</h4>
                                @if (review.IsVerifiedPurchase)
                                {
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                        </svg>
                                        Verified Student
                                    </span>
                                }
                            </div>
                            <div class="text-sm text-gray-500">
                                @review.CreatedAt.ToString("MMM dd, yyyy")
                            </div>
                        </div>

                        <!-- Rating -->
                        <div class="flex items-center mb-3">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <svg class="w-4 h-4 @(i <= review.Rating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                </svg>
                            }
                            <span class="ml-2 text-sm font-medium text-gray-900">@review.Rating/5</span>
                        </div>

                        <!-- Review Text -->
                        @if (!string.IsNullOrEmpty(review.ReviewText))
                        {
                            <p class="text-gray-700 leading-relaxed">@review.ReviewText</p>
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No reviews yet</h3>
            <p class="mt-1 text-sm text-gray-500">Be the first to review this course!</p>
        </div>
    }
</div>

@code {
    [Parameter] public int CourseId { get; set; }

    private List<CourseReview> reviews = new();
    private double averageRating = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadReviews();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        try
        {
            isLoading = true;
            reviews = await CourseService.GetCourseReviewsAsync(CourseId);
            averageRating = reviews.Any() ? reviews.Average(r => r.Rating) : 0;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading reviews:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetReviewerName(CourseReview review)
    {
        if (review.Student != null)
        {
            return $"{review.Student.FirstName} {review.Student.LastName}".Trim();
        }
        return "Anonymous Student";
    }
}