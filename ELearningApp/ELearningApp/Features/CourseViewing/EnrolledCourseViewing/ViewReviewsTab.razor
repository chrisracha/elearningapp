@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@inject ICourseService CourseService
@inject IJSRuntime JS

<div class="space-y-6">
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
        </div>
    }
    else
    {
        <!-- Review Statistics -->
        <div class="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-lg">
            <div class="flex items-center justify-between">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Course Reviews</h3>
                    <p class="text-gray-600">See what students are saying about this course</p>
                </div>
                <div class="text-center">
                    <div class="text-3xl font-bold text-gray-900">@averageRating.ToString("F1")</div>
                    <div class="flex items-center justify-center mt-1">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <svg class="w-5 h-5 @(i <= averageRating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                            </svg>
                        }
                    </div>
                    <div class="text-sm text-gray-600 mt-1">@reviews.Count review@(reviews.Count != 1 ? "s" : "")</div>
                </div>
            </div>
        </div>

        <!-- Reviews List -->
        @if (reviews.Any())
        {
            <div class="space-y-6">
                @foreach (var review in reviews.Take(10)) // Show first 10 reviews
                {
                    <div class="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
                        <div class="flex items-start space-x-4">
                            <!-- Reviewer Avatar -->
                            <div class="w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                                @if (!string.IsNullOrEmpty(review.Student?.ProfileImageUrl))
                                {
                                    <img src="@review.Student.ProfileImageUrl" alt="@GetReviewerName(review)" class="w-full h-full object-cover rounded-full">
                                }
                                else
                                {
                                    <div class="text-lg font-medium text-gray-600">
                                        @(GetReviewerName(review).Substring(0, 1).ToUpper())
                                    </div>
                                }
                            </div>

                            <!-- Review Content -->
                            <div class="flex-1">
                                <!-- Reviewer Info and Rating -->
                                <div class="flex items-center justify-between mb-3">
                                    <div>
                                        <h4 class="font-medium text-gray-900">@GetReviewerName(review)</h4>
                                        <p class="text-sm text-gray-500">@review.CreatedAt.ToString("MMMM dd, yyyy")</p>
                                    </div>
                                    <div class="flex items-center">
                                        @for (int j = 1; j <= 5; j++)
                                        {
                                            <svg class="w-4 h-4 @(j <= review.Rating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                            </svg>
                                        }
                                        <span class="ml-2 text-sm font-medium text-gray-900">@review.Rating/5</span>
                                    </div>
                                </div>

                                <!-- Review Text -->
                                @if (!string.IsNullOrEmpty(review.ReviewText))
                                {
                                    <p class="text-gray-700 leading-relaxed">@review.ReviewText</p>
                                }

                                <!-- Verified Purchase Badge -->
                                @if (review.IsVerifiedPurchase)
                                {
                                    <div class="mt-3">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                            </svg>
                                            Verified Purchase
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Show More Reviews Button -->
            @if (reviews.Count > 10)
            {
                <div class="text-center pt-6 border-t border-gray-200">
                    <button @onclick="ShowMoreReviews"
                            class="px-6 py-3 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        Show More Reviews (@(reviews.Count - 10) remaining)
                    </button>
                </div>
            }
        }
        else
        {
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No reviews yet</h3>
                <p class="mt-1 text-sm text-gray-500">Be the first to review this course!</p>
                <div class="mt-2 text-xs text-gray-400">
                    Debug: CourseId = @CourseId, Reviews Count = @reviews.Count
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public int CourseId { get; set; }

    private List<CourseReview> reviews = new();
    private double averageRating = 0;
    private bool isLoading = true;
    private int displayedReviewsCount = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadReviews();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            await JS.InvokeVoidAsync("console.log", $"Loading reviews for course {CourseId}");
            
            reviews = await CourseService.GetCourseReviewsAsync(CourseId);
            averageRating = reviews.Any() ? reviews.Average(r => r.Rating) : 0;
            
            await JS.InvokeVoidAsync("console.log", $"Loaded {reviews.Count} reviews for course {CourseId}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading reviews:", ex.Message);
            reviews = new List<CourseReview>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowMoreReviews()
    {
        displayedReviewsCount += 10;
        StateHasChanged();
    }

    private string GetReviewerName(CourseReview review)
    {
        if (review.Student != null)
        {
            var fullName = $"{review.Student.FirstName} {review.Student.LastName}".Trim();
            return !string.IsNullOrEmpty(fullName) ? fullName : "Anonymous Student";
        }
        return "Anonymous Student";
    }
}