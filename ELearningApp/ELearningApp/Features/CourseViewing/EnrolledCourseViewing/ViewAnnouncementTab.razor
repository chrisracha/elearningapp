@using ELearningApp.Models.Entities
@using ELearningApp.Services
@inject ICourseService CourseService
@inject IJSRuntime JS

<div class="space-y-6">
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-8">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
        </div>
    }
    else if (announcements.Any())
    {
        @foreach (var announcement in announcements)
        {
            <div class="bg-white border border-gray-200 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
                <div class="flex items-start justify-between">
                    <div class="flex-1">
                        <div class="flex items-center space-x-2 mb-2">
                            <h3 class="text-lg font-semibold text-gray-900">@announcement.Title</h3>
                            @if (announcement.IsImportant)
                            {
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                    Important
                                </span>
                            }
                        </div>
                        <div class="text-sm text-gray-500 mb-3">
                            @announcement.CreatedAt.ToString("MMM dd, yyyy") at @announcement.CreatedAt.ToString("h:mm tt")
                        </div>
                        <div class="text-gray-700 whitespace-pre-line">
                            @announcement.Content
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-1l-4 4z"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No announcements</h3>
            <p class="mt-1 text-sm text-gray-500">There are no announcements for this course yet.</p>
        </div>
    }
</div>

@code {
    [Parameter] public int CourseId { get; set; }

    private List<CourseAnnouncement> announcements = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        try
        {
            isLoading = true;
            announcements = await CourseService.GetCourseAnnouncementsAsync(CourseId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading announcements:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}