@page "/dashboard"
@page "/my-learning"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ICourseService CourseService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>My Learning Dashboard - E-Learning Platform</PageTitle>

<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        <!-- Dashboard Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">My Learning Dashboard</h1>
            <p class="mt-2 text-gray-600">Track your progress and continue your learning journey</p>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
            </div>
        }
        else
        {
            <!-- Dashboard Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <!-- Total Courses -->
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                <svg class="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Enrolled Courses</dt>
                                <dd class="text-2xl font-semibold text-gray-900">@enrolledCourses.Count()</dd>
                            </dl>
                        </div>
                    </div>
                </div>

                <!-- Completed Courses -->
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                                <svg class="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Completed</dt>
                                <dd class="text-2xl font-semibold text-gray-900">@completedCourses</dd>
                            </dl>
                        </div>
                    </div>
                </div>

                <!-- In Progress -->
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                                <svg class="w-5 h-5 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">In Progress</dt>
                                <dd class="text-2xl font-semibold text-gray-900">@inProgressCourses</dd>
                            </dl>
                        </div>
                    </div>
                </div>

                <!-- Total Study Time -->
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Study Time</dt>
                                <dd class="text-2xl font-semibold text-gray-900">@totalStudyHours h</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Continue Learning Section -->
            @if (recentCourses.Any())
            {
                <div class="mb-8">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-2xl font-bold text-gray-900">Continue Learning</h2>
                        <a href="/catalog" class="text-primary-600 hover:text-primary-700 font-medium">Browse More Courses</a>
                    </div>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        @foreach (var enrollment in recentCourses.Take(4))
                        {
                            <div class="bg-white rounded-lg shadow hover:shadow-lg transition-shadow">
                                <div class="p-6">
                                    <div class="flex items-start space-x-4">
                                        <!-- Course Image -->
                                        <div class="flex-shrink-0 w-20 h-16 bg-gray-200 rounded-lg overflow-hidden">
                                            @if (!string.IsNullOrEmpty(enrollment.Course.ImageUrl))
                                            {
                                                <img src="@enrollment.Course.ImageUrl" alt="@enrollment.Course.Title" class="w-full h-full object-cover">
                                            }
                                            else
                                            {
                                                <div class="w-full h-full bg-gradient-to-r from-primary-400 to-primary-600 flex items-center justify-center">
                                                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                                    </svg>
                                                </div>
                                            }
                                        </div>

                                        <!-- Course Info -->
                                        <div class="flex-1 min-w-0">
                                            <h3 class="text-lg font-semibold text-gray-900 truncate">@enrollment.Course.Title</h3>
                                            <p class="text-sm text-gray-600 mb-2">@enrollment.Course.Instructor.FirstName @enrollment.Course.Instructor.LastName</p>
                                            
                                            <!-- Progress Bar -->
                                            <div class="mb-3">
                                                <div class="flex items-center justify-between text-sm">
                                                    <span class="text-gray-600">Progress</span>
                                                    <span class="text-gray-900 font-medium">@((int)enrollment.ProgressPercentage)%</span>
                                                </div>
                                                <div class="mt-1 bg-gray-200 rounded-full h-2">
                                                    <div class="bg-primary-600 h-2 rounded-full transition-all duration-300" 
                                                         style="width: @(enrollment.ProgressPercentage)%"></div>
                                                </div>
                                            </div>
                                            
                                            <!-- Action Button -->
                                            <button @onclick="() => ContinueCourse(enrollment.Course.Id)"
                                                    class="w-full px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm font-medium">
                                                Continue Learning
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- All Enrolled Courses -->
            <div>
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-2xl font-bold text-gray-900">My Courses</h2>
                    
                    <!-- Filter Tabs -->
                    <div class="flex space-x-1 bg-gray-100 p-1 rounded-lg">
                        <button @onclick="() => SetActiveFilter(CourseFilter.All)"
                                class="@GetFilterButtonClasses(CourseFilter.All) px-3 py-1 rounded-md text-sm font-medium transition-colors">
                            All
                        </button>
                        <button @onclick="() => SetActiveFilter(CourseFilter.InProgress)"
                                class="@GetFilterButtonClasses(CourseFilter.InProgress) px-3 py-1 rounded-md text-sm font-medium transition-colors">
                            In Progress
                        </button>
                        <button @onclick="() => SetActiveFilter(CourseFilter.Completed)"
                                class="@GetFilterButtonClasses(CourseFilter.Completed) px-3 py-1 rounded-md text-sm font-medium transition-colors">
                            Completed
                        </button>
                    </div>
                </div>

                @if (filteredEnrollments.Any())
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        @foreach (var enrollment in filteredEnrollments)
                        {
                            <div class="bg-white rounded-lg shadow hover:shadow-lg transition-shadow">
                                <div class="aspect-w-16 aspect-h-9">
                                    @if (!string.IsNullOrEmpty(enrollment.Course.ImageUrl))
                                    {
                                        <img src="@enrollment.Course.ImageUrl" alt="@enrollment.Course.Title" class="w-full h-48 object-cover rounded-t-lg">
                                    }
                                    else
                                    {
                                        <div class="w-full h-48 bg-gradient-to-r from-primary-400 to-primary-600 rounded-t-lg flex items-center justify-center">
                                            <svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                            </svg>
                                        </div>
                                    }
                                </div>
                                
                                <div class="p-6">
                                    <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">@enrollment.Course.Title</h3>
                                    <p class="text-sm text-gray-600 mb-4">@enrollment.Course.Instructor.FirstName @enrollment.Course.Instructor.LastName</p>
                                    
                                    <!-- Progress -->
                                    <div class="mb-4">
                                        <div class="flex items-center justify-between text-sm mb-1">
                                            <span class="text-gray-600">Progress</span>
                                            <span class="text-gray-900 font-medium">@((int)enrollment.ProgressPercentage)%</span>
                                        </div>
                                        <div class="bg-gray-200 rounded-full h-2">
                                            <div class="bg-primary-600 h-2 rounded-full transition-all duration-300" 
                                                 style="width: @(enrollment.ProgressPercentage)%"></div>
                                        </div>
                                    </div>

                                    <!-- Enrollment Date -->
                                    <p class="text-xs text-gray-500 mb-4">
                                        Enrolled on @enrollment.EnrollmentDate.ToString("MMM dd, yyyy")
                                    </p>
                                    
                                    <!-- Action Buttons -->
                                    <div class="space-y-2">
                                        <button @onclick="() => ContinueCourse(enrollment.Course.Id)"
                                                class="w-full px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm font-medium">
                                            @(enrollment.ProgressPercentage >= 100 ? "Review Course" : "Continue Learning")
                                        </button>
                                        
                                        @if (enrollment.ProgressPercentage >= 100)
                                        {
                                            <button @onclick="() => ViewCertificate(enrollment.Course.Id)"
                                                    class="w-full px-4 py-2 border border-primary-600 text-primary-600 rounded-lg hover:bg-primary-50 transition-colors text-sm font-medium">
                                                View Certificate
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-12">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">No courses found</h3>
                        <p class="mt-1 text-sm text-gray-500">
                            @if (activeFilter == CourseFilter.All)
                            {
                                <span>You haven't enrolled in any courses yet.</span>
                            }
                            else if (activeFilter == CourseFilter.InProgress)
                            {
                                <span>You don't have any courses in progress.</span>
                            }
                            else
                            {
                                <span>You haven't completed any courses yet.</span>
                            }
                        </p>
                        <div class="mt-6">
                            <a href="/catalog" 
                               class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                                Browse Courses
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Enrollment> enrolledCourses = new();
    private List<Enrollment> recentCourses = new();
    private IEnumerable<Enrollment> filteredEnrollments = new List<Enrollment>();
    private bool isLoading = true;

    // Stats
    private int completedCourses = 0;
    private int inProgressCourses = 0;
    private int totalStudyHours = 0;

    // Filter
    private CourseFilter activeFilter = CourseFilter.All;

    private enum CourseFilter
    {
        All,
        InProgress,
        Completed
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            var currentUser = await UserService.GetCurrentUserAsync();
            
            if (currentUser != null)
            {
                enrolledCourses = (await CourseService.GetUserEnrollmentsAsync(currentUser.Id)).ToList();
                recentCourses = enrolledCourses
                    .Where(e => e.ProgressPercentage > 0 && e.ProgressPercentage < 100)
                    .OrderByDescending(e => e.LastAccessedDate ?? e.EnrollmentDate)
                    .ToList();

                // Calculate stats
                completedCourses = enrolledCourses.Count(e => e.ProgressPercentage >= 100);
                inProgressCourses = enrolledCourses.Count(e => e.ProgressPercentage > 0 && e.ProgressPercentage < 100);
                totalStudyHours = enrolledCourses.Sum(e => e.TimeSpentMinutes) / 60;

                // Apply initial filter
                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading dashboard data:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetActiveFilter(CourseFilter filter)
    {
        activeFilter = filter;
        ApplyFilter();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        filteredEnrollments = activeFilter switch
        {
            CourseFilter.InProgress => enrolledCourses.Where(e => e.ProgressPercentage > 0 && e.ProgressPercentage < 100),
            CourseFilter.Completed => enrolledCourses.Where(e => e.ProgressPercentage >= 100),
            _ => enrolledCourses
        };
    }

    private string GetFilterButtonClasses(CourseFilter filter)
    {
        return activeFilter == filter
            ? "bg-white text-gray-900 shadow-sm"
            : "text-gray-500 hover:text-gray-900";
    }

    private void ContinueCourse(int courseId)
    {
        Navigation.NavigateTo($"/course/{courseId}/learn");
    }

    private async Task ViewCertificate(int courseId)
    {
        await JS.InvokeVoidAsync("alert", "Certificate viewing will be implemented in Phase 2");
    }
} 