@page "/instructor/create-course"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Policy = "InstructorOnly")]
@inject ICourseService CourseService
@inject IUserService UserService
@inject StaticDataService StaticDataService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Create Course - E-Learning Platform</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-4">
                        <a href="/instructor/courses" class="hover:text-gray-700">Course Management</a>
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                        <span class="text-gray-900">Create Course</span>
                    </nav>
                    <h1 class="text-3xl font-bold text-gray-900">Create New Course</h1>
                    <p class="mt-2 text-gray-600">Fill in the course details to get started</p>
                </div>
                <button @onclick="NavigateBack" 
                        class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                    Back
                </button>
            </div>
        </div>

        <!-- Course Creation Form -->
        <div class="bg-white shadow rounded-lg">
            <EditForm Model="courseDto" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                
                <div class="px-6 py-8">
                    <div class="grid grid-cols-1 gap-6">
                        
                        <!-- Basic Information Section -->
                        <div class="border-b border-gray-200 pb-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Basic Information</h3>
                            
                            <div class="grid grid-cols-1 gap-6">
                                <!-- Course Title -->
                                <div>
                                    <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                                        Course Title <span class="text-red-500">*</span>
                                    </label>
                                    <InputText @bind-Value="courseDto.Title" 
                                               id="title"
                                               class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                               placeholder="Enter course title" />
                                    <ValidationMessage For="@(() => courseDto.Title)" class="text-red-600 text-sm mt-1" />
                                </div>

                                <!-- Short Description -->
                                <div>
                                    <label for="shortDescription" class="block text-sm font-medium text-gray-700 mb-2">
                                        Short Description <span class="text-red-500">*</span>
                                    </label>
                                    <InputTextArea @bind-Value="courseDto.ShortDescription" 
                                                   id="shortDescription"
                                                   rows="3"
                                                   class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                   placeholder="Brief description of your course" />
                                    <ValidationMessage For="@(() => courseDto.ShortDescription)" class="text-red-600 text-sm mt-1" />
                                </div>

                                <!-- Long Description -->
                                <div>
                                    <label for="longDescription" class="block text-sm font-medium text-gray-700 mb-2">
                                        Detailed Description
                                    </label>
                                    <InputTextArea @bind-Value="courseDto.LongDescription" 
                                                   id="longDescription"
                                                   rows="6"
                                                   class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                   placeholder="Detailed description of what students will learn" />
                                    <ValidationMessage For="@(() => courseDto.LongDescription)" class="text-red-600 text-sm mt-1" />
                                </div>
                            </div>
                        </div>

                        <!-- Course Details Section -->
                        <div class="border-b border-gray-200 pb-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Course Details</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <!-- Category -->
                                <div>
                                    <label for="category" class="block text-sm font-medium text-gray-700 mb-2">
                                        Category <span class="text-red-500">*</span>
                                    </label>
                                    <InputSelect @bind-Value="courseDto.CategoryId" 
                                                 id="category"
                                                 class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                        <option value="0">Select a category</option>
                                        @if (categories != null)
                                        {
                                            @foreach (var category in categories)
                                            {
                                                <option value="@category.Id">@category.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => courseDto.CategoryId)" class="text-red-600 text-sm mt-1" />
                                </div>

                                <!-- Course Level -->
                                <div>
                                    <label for="level" class="block text-sm font-medium text-gray-700 mb-2">
                                        Course Level <span class="text-red-500">*</span>
                                    </label>
                                    <InputSelect @bind-Value="courseDto.Level" 
                                                 id="level"
                                                 class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                        <option value="@CourseLevel.Beginner">Beginner</option>
                                        <option value="@CourseLevel.Intermediate">Intermediate</option>
                                        <option value="@CourseLevel.Advanced">Advanced</option>
                                        <option value="@CourseLevel.Expert">Expert</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => courseDto.Level)" class="text-red-600 text-sm mt-1" />
                                </div>

                                <!-- Duration -->
                                <div>
                                    <label for="duration" class="block text-sm font-medium text-gray-700 mb-2">
                                        Estimated Duration (minutes) <span class="text-red-500">*</span>
                                    </label>
                                    <InputNumber @bind-Value="courseDto.EstimatedDurationMinutes" 
                                                 id="duration"
                                                 class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                 placeholder="e.g., 300 (5 hours)" />
                                    <ValidationMessage For="@(() => courseDto.EstimatedDurationMinutes)" class="text-red-600 text-sm mt-1" />
                                    @if (courseDto.EstimatedDurationMinutes > 0)
                                    {
                                        <p class="text-sm text-gray-500 mt-1">
                                            Duration: @courseDto.EstimatedDurationMinutes minutes
                                        </p>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- YouTube Videos Section -->
                        <div class="border-b border-gray-200 pb-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">YouTube Videos</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <!-- YouTube Video ID -->
                                <div>
                                    <label for="youtubeVideoId" class="block text-sm font-medium text-gray-700 mb-2">
                                        YouTube Video ID
                                    </label>
                                    <div class="relative">
                                        <InputText @bind-Value="courseDto.YouTubeVideoId"
                                                   id="youtubeVideoId"
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500"
                                                   placeholder="e.g., dQw4w9WgXcQ" />
                                    </div>
                                    <p class="text-sm text-gray-500 mt-1">Enter the YouTube video ID for the main course content</p>
                                </div>

                                <!-- YouTube Preview Video ID -->
                                <div>
                                    <label for="youtubePreviewVideoId" class="block text-sm font-medium text-gray-700 mb-2">
                                        YouTube Preview Video ID
                                    </label>
                                    <div class="relative">
                                        <InputText @bind-Value="courseDto.YouTubePreviewVideoId"
                                                   id="youtubePreviewVideoId"
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500"
                                                   placeholder="e.g., jNQXAC9IVRw" />
                                    </div>
                                    <p class="text-sm text-gray-500 mt-1">Enter the YouTube video ID for course preview (optional)</p>
                                </div>
                            </div>
                        </div>

                        <!-- Course Media Section -->
                        <div class="border-b border-gray-200 pb-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Course Media</h3>
                            
                            <div class="grid grid-cols-1 gap-6">
                                <!-- Course Image -->
                                <div>
                                    <label for="imageUrl" class="block text-sm font-medium text-gray-700 mb-2">
                                        Course Image URL
                                    </label>
                                    <InputText @bind-Value="courseDto.ImageUrl" 
                                               id="imageUrl"
                                               class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                               placeholder="https://example.com/course-image.jpg" />
                                    <ValidationMessage For="@(() => courseDto.ImageUrl)" class="text-red-600 text-sm mt-1" />
                                    <p class="text-sm text-gray-500 mt-1">Recommended size: 1200x630px</p>
                                </div>

                            </div>
                        </div>

                        <!-- Additional Information Section -->
                        <div class="pb-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Additional Information</h3>
                            
                            <div class="grid grid-cols-1 gap-6">
                                <!-- Prerequisites -->
                                <div>
                                    <label for="prerequisites" class="block text-sm font-medium text-gray-700 mb-2">
                                        Prerequisites
                                    </label>
                                    <InputTextArea @bind-Value="courseDto.Prerequisites" 
                                                   id="prerequisites"
                                                   rows="3"
                                                   class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                   placeholder="What should students know before taking this course?" />
                                    <ValidationMessage For="@(() => courseDto.Prerequisites)" class="text-red-600 text-sm mt-1" />
                                </div>

                                <!-- What You Will Learn -->
                                <div>
                                    <label for="learningOutcomes" class="block text-sm font-medium text-gray-700 mb-2">
                                        What You Will Learn
                                    </label>
                                    <InputTextArea @bind-Value="courseDto.WhatYouWillLearn" 
                                                   id="learningOutcomes"
                                                   rows="4"
                                                   class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                   placeholder="List the key learning outcomes and skills students will gain" />
                                    <ValidationMessage For="@(() => courseDto.WhatYouWillLearn)" class="text-red-600 text-sm mt-1" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-between">
                    <button type="button" @onclick="NavigateBack"
                            class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Cancel
                    </button>
                    
                    <div class="flex space-x-3">
                        <button type="submit" 
                                disabled="@isSubmitting"
                                class="inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                            @if (isSubmitting)
                            {
                                <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>Create Course</span>
                            }
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private CourseCreateDto courseDto = new();
    private List<Category>? categories;
    private bool isSubmitting = false;

    protected override Task OnInitializedAsync()
    {
        categories = StaticDataService.GetCategories().ToList();
        return Task.CompletedTask;
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;

            // Get current user
            var currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                await JS.InvokeVoidAsync("alert", "Unable to identify current user.");
                return;
            }

            // Create course entity
            var course = new Course
            {
                Title = courseDto.Title,
                ShortDescription = courseDto.ShortDescription,
                LongDescription = courseDto.LongDescription ?? string.Empty,
                ImageUrl = courseDto.ImageUrl,
                YouTubeVideoId = courseDto.YouTubeVideoId,
                YouTubePreviewVideoId = courseDto.YouTubePreviewVideoId,
                Level = courseDto.Level,
                CategoryId = courseDto.CategoryId == 0 ? null : courseDto.CategoryId,
                Prerequisites = courseDto.Prerequisites,
                WhatYouWillLearn = courseDto.WhatYouWillLearn,
                EstimatedDurationMinutes = courseDto.EstimatedDurationMinutes,
                InstructorId = currentUser!.Id,
                Status = CourseStatus.Draft
            };

            // Save course
            await CourseService.CreateCourseAsync(course);

            await JS.InvokeVoidAsync("alert", "Course created successfully!");
            Navigation.NavigateTo("/instructor/courses");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error creating course: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/instructor/courses");
    }
} 