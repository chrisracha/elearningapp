@page "/instructor/courses"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "InstructorOnly")]
@inject ICourseService CourseService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Course Management - E-Learning Platform</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Course Management</h1>
                    <p class="mt-2 text-gray-600">Manage your courses and content</p>
                </div>
                <button @onclick="NavigateToCreateCourse" 
                        class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    New Course
                </button>
            </div>
        </div>

        <!-- Search and Filter Bar -->
        <div class="bg-white rounded-lg shadow mb-6 p-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div class="flex-1 max-w-lg">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                        <input @bind="searchTerm" @bind:event="oninput" @onkeypress="OnSearchKeyPress"
                               type="text" 
                               class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                               placeholder="Search courses...">
                    </div>
                </div>
                
                <div class="flex items-center gap-4">
                    <select @bind="statusFilter" @bind:after="FilterCourses"
                            class="block w-32 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        <option value="">All Status</option>
                        <option value="Draft">Draft</option>
                        <option value="Published">Published</option>
                        <option value="Archived">Archived</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Course Grid -->
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else if (paginatedCourses?.Any() == true)
        {
            <!-- Course Cards Grid - 3 per row -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                @foreach (var course in paginatedCourses)
                {
                    <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200">
                        <!-- Course Image -->
                        <div class="relative h-48 bg-gray-200 rounded-t-lg overflow-hidden">
                            @if (!string.IsNullOrEmpty(course.ImageUrl))
                            {
                                <img src="@course.ImageUrl" alt="@course.Title" class="w-full h-full object-cover">
                            }
                            else
                            {
                                <div class="w-full h-full flex items-center justify-center">
                                    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                </div>
                            }
                            
                            <!-- Status Badge -->
                            <div class="absolute top-3 right-3">
                                <span class="@GetStatusBadgeClass(course.Status) px-2 py-1 text-xs font-semibold rounded-full">
                                    @course.Status.ToString()
                                </span>
                            </div>
                        </div>

                        <!-- Course Content -->
                        <div class="p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2 min-h-[56px]">@course.Title</h3>
                            <p class="text-sm text-gray-600 mb-4 line-clamp-2 min-h-[40px]">@course.ShortDescription</p>
                            
                            <!-- Course Stats -->
                            <div class="space-y-3 mb-4">
                                <div class="flex items-center justify-between text-sm text-gray-500">
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a4 4 0 00-3-3.87M9 20H4v-2a4 4 0 013-3.87m9-5a4 4 0 11-8 0 4 4 0 018 0z" />
                                        </svg>
                                        @course.EnrollmentCount students
                                    </div>
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1 text-yellow-400" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                        </svg>
                                        @course.AverageRating.ToString("F1")
                                    </div>
                                </div>

                                <div class="flex items-center justify-between">
                                    <span class="text-sm font-medium text-green-600">Free</span>
                                    <span class="text-xs text-gray-500">
                                        @(course.EstimatedDurationMinutes / 60)h @(course.EstimatedDurationMinutes % 60)m
                                    </span>
                                </div>
                            </div>

                            <!-- Action Buttons - Stacked -->
                            <div class="space-y-2">
                                <button @onclick="() => ViewCourse(course.Id)"
                                        class="w-full py-2 px-4 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors flex items-center justify-center">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                    View Details
                                </button>
                                
                                <div class="grid grid-cols-2 gap-2">
                                    <button @onclick="() => EditCourse(course.Id)"
                                            class="py-2 px-3 bg-gray-100 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors flex items-center justify-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                        Edit
                                    </button>
                                    
                                    <button @onclick="() => UploadContent(course.Id)"
                                            class="py-2 px-3 bg-gray-100 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors flex items-center justify-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                        </svg>
                                        Upload
                                    </button>
                                </div>
                                
                                <button @onclick="() => DeleteCourse(course.Id)"
                                        class="w-full py-2 px-4 bg-red-50 text-red-700 text-sm font-medium rounded-md hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors flex items-center justify-center">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                    Delete Course
                                </button>
                            </div>
                        </div>
                    </div>
                }

                <!-- Create New Course Card -->
                <div @onclick="NavigateToCreateCourse" 
                     class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 cursor-pointer border-2 border-dashed border-gray-300 hover:border-blue-500">
                    <div class="h-full flex flex-col items-center justify-center p-8 text-center min-h-[400px]">
                        <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                            <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">Create New Course</h3>
                        <p class="text-sm text-gray-500">Start from scratch or use a template</p>
                    </div>
                </div>
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="flex items-center justify-between bg-white px-4 py-3 border-t border-gray-200 sm:px-6 rounded-lg shadow">
                    <div class="flex-1 flex justify-between sm:hidden">
                        @if (currentPage > 1)
                        {
                            <button @onclick="() => ChangePage(currentPage - 1)"
                                    class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Previous
                            </button>
                        }
                        @if (currentPage < totalPages)
                        {
                            <button @onclick="() => ChangePage(currentPage + 1)"
                                    class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Next
                            </button>
                        }
                    </div>
                    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                        <div>
                            <p class="text-sm text-gray-700">
                                Showing <span class="font-medium">@((currentPage - 1) * pageSize + 1)</span> to 
                                <span class="font-medium">@Math.Min(currentPage * pageSize, totalCourses)</span> of 
                                <span class="font-medium">@totalCourses</span> results
                            </p>
                        </div>
                        <div>
                            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                @if (currentPage > 1)
                                {
                                    <button @onclick="() => ChangePage(currentPage - 1)"
                                            class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        <span class="sr-only">Previous</span>
                                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                        </svg>
                                    </button>
                                }

                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    var pageNumber = i;
                                    <button @onclick="() => ChangePage(pageNumber)"
                                            class="relative inline-flex items-center px-4 py-2 border text-sm font-medium @(pageNumber == currentPage ? "z-10 bg-blue-50 border-blue-500 text-blue-600" : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50")">
                                        @pageNumber
                                    </button>
                                }

                                @if (currentPage < totalPages)
                                {
                                    <button @onclick="() => ChangePage(currentPage + 1)"
                                            class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        <span class="sr-only">Next</span>
                                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                        </svg>
                                    </button>
                                }
                            </nav>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <!-- Empty State -->
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No courses found</h3>
                <p class="mt-1 text-sm text-gray-500">Get started by creating your first course.</p>
                <div class="mt-6">
                    <button @onclick="NavigateToCreateCourse"
                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Create Course
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Course>? courses;
    private List<Course>? filteredCourses;
    private List<Course>? paginatedCourses;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 6;
    private int totalCourses = 0;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        try
        {
            isLoading = true;
            var currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                courses = (await CourseService.GetCoursesByInstructorAsync(currentUser.Id)).ToList();
                filteredCourses = courses;
                ApplyPagination();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading courses:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            return FilterCourses();
        }
        return Task.CompletedTask;
    }

    private Task FilterCourses()
    {
        if (courses == null) return Task.CompletedTask;

        filteredCourses = courses.Where(c =>
            (string.IsNullOrEmpty(searchTerm) || c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             c.ShortDescription.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(statusFilter) || c.Status.ToString() == statusFilter)
        ).ToList();

        currentPage = 1; // Reset to first page when filtering
        ApplyPagination();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ApplyPagination()
    {
        if (filteredCourses == null)
        {
            paginatedCourses = new List<Course>();
            totalCourses = 0;
            totalPages = 0;
            return;
        }

        totalCourses = filteredCourses.Count;
        totalPages = (int)Math.Ceiling((double)totalCourses / pageSize);
        
        // Ensure current page is within bounds
        if (currentPage > totalPages && totalPages > 0)
        {
            currentPage = totalPages;
        }
        else if (currentPage < 1)
        {
            currentPage = 1;
        }

        // Get courses for current page
        var skip = (currentPage - 1) * pageSize;
        paginatedCourses = filteredCourses.Skip(skip).Take(pageSize).ToList();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            ApplyPagination();
            StateHasChanged();
        }
    }

    private string GetStatusBadgeClass(CourseStatus status)
    {
        return status switch
        {
            CourseStatus.Published => "bg-green-100 text-green-800",
            CourseStatus.Draft => "bg-yellow-100 text-yellow-800",
            CourseStatus.Archived => "bg-gray-100 text-gray-800",
            CourseStatus.Suspended => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private void NavigateToCreateCourse()
    {
        Navigation.NavigateTo("/instructor/create-course");
    }

    private void EditCourse(int courseId)
    {
        Navigation.NavigateTo($"/instructor/edit-course/{courseId}");
    }

    private void UploadContent(int courseId)
    {
        Navigation.NavigateTo($"/instructor/upload-content/{courseId}");
    }

    private void ViewCourse(int courseId)
    {
        Navigation.NavigateTo($"/course/{courseId}");
    }

    private async Task DeleteCourse(int courseId)
    {
        try
        {
            // Get current user for authorization
            var currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                await JS.InvokeVoidAsync("alert", "Unable to identify current user.");
                return;
            }

            // Check if course can be deleted and get deletion info
            var canDelete = await CourseService.CanDeleteCourseAsync(courseId, currentUser.Id);
            var (hasEnrollments, enrollmentCount) = await CourseService.GetCourseDeletionInfoAsync(courseId);

            // Create appropriate confirmation message
            string confirmMessage;
            if (hasEnrollments)
            {
                confirmMessage = $"This course has {enrollmentCount} enrollment(s). Are you sure you want to delete/archive it?";
            }
            else
            {
                confirmMessage = "Are you sure you want to delete this course? This action cannot be undone.";
            }

            if (await JS.InvokeAsync<bool>("confirm", confirmMessage))
            {
                var (success, message) = await CourseService.DeleteCourseWithValidationAsync(courseId, currentUser.Id);
                
                if (success)
                {
                    await LoadCourses();
                    await JS.InvokeVoidAsync("alert", message);
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", message);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error deleting course: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
}