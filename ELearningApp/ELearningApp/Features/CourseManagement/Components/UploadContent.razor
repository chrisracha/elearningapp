@page "/instructor/upload-content/{CourseId:int}"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@using Microsoft.AspNetCore.Authorization
@using ELearningApp.Features.Shared
@attribute [Authorize(Policy = "InstructorOnly")]
@inject ICourseService CourseService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer 

<PageTitle>Upload Content - E-Learning Platform</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-4">
                        <a href="/instructor/courses" class="hover:text-gray-700">Course Management</a>
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                        <span class="text-gray-900">Upload Content</span>
                    </nav>
                    <h1 class="text-3xl font-bold text-gray-900">Upload Course Content</h1>
                    @if (course != null)
                    {
                        <p class="mt-2 text-gray-600">Managing content for: <span class="font-medium">@course.Title</span></p>
                    }
                </div>
                <button @onclick="NavigateBack" 
                        class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                    Back
                </button>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else if (course != null)
        {
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                
                <!-- Course Structure Panel -->
                <div class="lg:col-span-2">
                    <div class="bg-white shadow rounded-lg">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <h2 class="text-lg font-medium text-gray-900">Course Structure</h2>
                                <button @onclick="AddModule"
                                        class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-blue-600 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    Add Module
                                </button>
                            </div>
                        </div>
                        
                        <div class="p-6">
                            @if (modules?.Any() == true)
                            {
                                <div class="space-y-4">
                                    @foreach (var module in modules.OrderBy(m => m.OrderIndex))
                                    {
                                        <div class="border border-gray-200 rounded-lg">
                                            <div class="px-4 py-3 bg-gray-50 border-b border-gray-200 flex items-center justify-between">
                                                <div class="flex items-center">
                                                    <svg class="w-5 h-5 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                                    </svg>
                                                    <h3 class="text-sm font-medium text-gray-900">Module @module.OrderIndex: @module.Title</h3>
                                                </div>
                                                <div class="flex items-center space-x-2">
                                                    <button @onclick="() => AddLesson(module.Id)"
                                                            class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                                        Add Lesson
                                                    </button>
                                                    <div class="text-gray-300">|</div>
                                                    <button @onclick="() => EditModule(module.Id)"
                                                            class="text-gray-600 hover:text-gray-800 text-sm">
                                                        Edit
                                                    </button>
                                                    <button @onclick="() => DeleteModule(module.Id)"
                                                            class="text-red-600 hover:text-red-800 text-sm">
                                                        Delete
                                                    </button>
                                                </div>
                                            </div>
                                            
                                            @if (module.Lessons?.Any() == true)
                                            {
                                                <div class="p-4">
                                                    <div class="space-y-2">
                                                        @foreach (var lesson in module.Lessons.OrderBy(l => l.OrderIndex))
                                                        {
                                                            <div class="flex items-center justify-between p-3 bg-white border border-gray-100 rounded-md hover:bg-gray-50">
                                                                <div class="flex items-center">
                                                                    <svg class="w-4 h-4 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        @if (lesson.Type == LessonType.Video)
                                                                        {
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15a2 2 0 002-2V9a2 2 0 00-2-2h-1.172a1 1 0 01-.707-.293L10.707 4.293A1 1 0 0010 4H8a2 2 0 00-2 2v5a2 2 0 002 2z"></path>
                                                                        }
                                                                        else if (lesson.Type == LessonType.Article)
                                                                        {
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                                        }
                                                                        else
                                                                        {
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                                                        }
                                                                    </svg>
                                                                    <div>
                                                                        <span class="text-sm font-medium text-gray-900">@lesson.Title</span>
                                                                        <div class="flex items-center space-x-2 text-xs text-gray-500">
                                                                            <span class="px-2 py-1 bg-gray-100 rounded">@lesson.Type</span>
                                                                            <span>@lesson.DurationMinutes min</span>
                                                                            @if (lesson.IsFree)
                                                                            {
                                                                                <span class="px-2 py-1 bg-green-100 text-green-800 rounded">Free</span>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="flex items-center space-x-2">
                                                                    <button @onclick="() => EditLesson(lesson.Id)"
                                                                            class="text-gray-600 hover:text-gray-800 text-sm">
                                                                        Edit
                                                                    </button>
                                                                    <button @onclick="() => DeleteLesson(lesson.Id)"
                                                                            class="text-red-600 hover:text-red-800 text-sm">
                                                                        Delete
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="p-4 text-center text-gray-500">
                                                    <p class="text-sm">No lessons yet. Click "Add Lesson" to get started.</p>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <!-- Empty State -->
                                <div class="text-center py-12">
                                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                    </svg>
                                    <h3 class="mt-2 text-sm font-medium text-gray-900">No modules yet</h3>
                                    <p class="mt-1 text-sm text-gray-500">Get started by creating your first module.</p>
                                    <div class="mt-6">
                                        <button @onclick="AddModule"
                                                class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                            </svg>
                                            Add Module
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <h3 class="mt-2 text-sm font-medium text-gray-900">Course not found</h3>
                <p class="mt-1 text-sm text-gray-500">The course you're looking for doesn't exist or you don't have permission to manage it.</p>
            </div>
        }
    </div>
</div>

<TailwindModal Show="@showModal" Title="@modalTitle" Message="@modalMessage" OkText="@modalOkText" CancelText="@modalCancelText" ShowCancel="@modalShowCancel" Icon="@modalIcon" OnClose="OnModalClose" />
<TailwindInputModal Show="@showInputModal" Title="@inputModalTitle" Label="@inputModalLabel" Placeholder="@inputModalPlaceholder" InitialValue="@inputModalInitialValue" OkText="@inputModalOkText" CancelText="@inputModalCancelText" OnClose="OnInputModalClose" />
<TailwindLessonModal Show="@showLessonModal" Title="@lessonModalTitle" OkText="@lessonModalOkText" CancelText="@lessonModalCancelText" OnClose="OnLessonModalClose" />

@code {
    [Parameter] public int CourseId { get; set; }
    
    private Course? course;
    private List<Module>? modules;
    private bool isLoading = true;
    private bool isUploading = false;
    private int uploadProgress = 0;

    // Modal state
    private bool showModal = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private string modalOkText = "OK";
    private string modalCancelText = "Cancel";
    private bool modalShowCancel = false;
    private string modalIcon = "";
    private Func<bool, Task>? modalCallback;
    private Func<Task>? modalOkCallback;

    // Input modal state
    private bool showInputModal = false;
    private string inputModalTitle = "";
    private string inputModalLabel = "";
    private string inputModalPlaceholder = "";
    private string inputModalInitialValue = "";
    private string inputModalOkText = "OK";
    private string inputModalCancelText = "Cancel";
    private Func<string, Task>? inputModalCallback;

    // Lesson modal state
    private bool showLessonModal = false;
    private string lessonModalTitle = "";
    private string lessonModalOkText = "OK";
    private string lessonModalCancelText = "Cancel";
    private TailwindLessonModal.LessonModalResult? lessonModalInitialValue;
    private Func<TailwindLessonModal.LessonModalResult, Task>? lessonModalCallback;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourse();
    }

    private async Task LoadCourse()
    {
        try
        {
            isLoading = true;
            course = await CourseService.GetCourseWithDetailsAsync(CourseId);
            
            if (course != null)
            {
                modules = course.Modules.ToList();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading course:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddModule()
    {
        inputModalTitle = "Add Module";
        inputModalLabel = "Module Title";
        inputModalPlaceholder = "Enter module title";
        inputModalInitialValue = "";
        inputModalOkText = "Add";
        inputModalCancelText = "Cancel";
        inputModalCallback = async (title) =>
        {
            if (!string.IsNullOrWhiteSpace(title))
            {
                try
                {
                    var newModule = new Module
                    {
                        Title = title,
                        Description = $"Module: {title}",
                        CourseId = CourseId,
                        OrderIndex = modules?.Count + 1 ?? 1
                    };
                    await CourseService.CreateModuleAsync(newModule);
                    await LoadCourse();
                    await ShowSuccessModal($"Module '{title}' created successfully!");
                }
                catch (Exception ex)
                {
                    await ShowErrorModal($"Error creating module: {ex.Message}");
                }
            }
        };
        showInputModal = true;
        StateHasChanged();
    }

    private async Task EditModule(int moduleId)
    {
        var module = modules?.FirstOrDefault(m => m.Id == moduleId);
        if (module == null) return;
        inputModalTitle = "Edit Module";
        inputModalLabel = "Module Title";
        inputModalPlaceholder = "Enter new module title";
        inputModalInitialValue = module.Title;
        inputModalOkText = "Save";
        inputModalCancelText = "Cancel";
        inputModalCallback = async (newTitle) =>
        {
            if (!string.IsNullOrWhiteSpace(newTitle) && newTitle != module.Title)
            {
                try
                {
                    module.Title = newTitle;
                    await CourseService.UpdateModuleAsync(module);
                    await LoadCourse();
                    await ShowSuccessModal("Module updated successfully!");
                }
                catch (Exception ex)
                {
                    await ShowErrorModal($"Error updating module: {ex.Message}");
                }
            }
        };
        showInputModal = true;
        StateHasChanged();
    }

    private async Task DeleteModule(int moduleId)
    {
        await ShowConfirmModal("Delete Module", "Are you sure you want to delete this module and all its lessons?", async (confirmed) =>
        {
            if (confirmed)
            {
                try
                {
                    await CourseService.DeleteModuleAsync(moduleId);
                    // Reload course to get updated modules
                    await LoadCourse();
                    await ShowSuccessModal("Module deleted successfully!");
                }
                catch (Exception ex)
                {
                    await ShowErrorModal($"Error deleting module: {ex.Message}");
                }
            }
        });
    }

    private async Task AddLesson(int moduleId)
    {
        lessonModalTitle = "Add Lesson";
        lessonModalOkText = "Add";
        lessonModalCancelText = "Cancel";
        lessonModalInitialValue = null;
        lessonModalCallback = async (result) =>
        {
            if (!string.IsNullOrWhiteSpace(result.Title))
            {
                try
                {
                    var module = modules?.FirstOrDefault(m => m.Id == moduleId);
                    var newLesson = new Lesson
                    {
                        Title = result.Title,
                        Description = $"Lesson: {result.Title}",
                        Content = $"Content for {result.Title}",
                        Type = Enum.TryParse<LessonType>(result.Type, true, out var type) ? type : LessonType.Video,
                        ModuleId = moduleId,
                        OrderIndex = module?.Lessons?.Count + 1 ?? 1,
                        DurationMinutes = result.Duration,
                        IsFree = true,
                        VideoUrl = result.VideoUrl,
                        ArticleUrl = result.ArticleUrl,
                        DownloadUrl = result.ExternalLink
                    };
                    await CourseService.CreateLessonAsync(newLesson);
                    await LoadCourse();
                    await ShowSuccessModal($"Lesson '{result.Title}' created successfully!");
                }
                catch (Exception ex)
                {
                    await ShowErrorModal($"Error creating lesson: {ex.Message}");
                }
            }
        };
        showLessonModal = true;
        StateHasChanged();
    }

    private async Task EditLesson(int lessonId)
    {
        var lesson = modules?.SelectMany(m => m.Lessons ?? Enumerable.Empty<Lesson>()).FirstOrDefault(l => l.Id == lessonId);
        if (lesson == null) return;
        lessonModalTitle = "Edit Lesson";
        lessonModalOkText = "Save";
        lessonModalCancelText = "Cancel";
        lessonModalInitialValue = new TailwindLessonModal.LessonModalResult
        {
            Title = lesson.Title,
            Type = lesson.Type.ToString(),
            Duration = lesson.DurationMinutes,
            VideoUrl = lesson.VideoUrl ?? "",
            ArticleUrl = lesson.ArticleUrl ?? "",
            ExternalLink = lesson.DownloadUrl ?? ""
        };
        lessonModalCallback = async (result) =>
        {
            if (!string.IsNullOrWhiteSpace(result.Title) && result.Title != lesson.Title)
            {
                try
                {
                    lesson.Title = result.Title;
                    lesson.Type = Enum.TryParse<LessonType>(result.Type, true, out var type) ? type : LessonType.Video;
                    lesson.DurationMinutes = result.Duration;
                    lesson.VideoUrl = result.VideoUrl;
                    lesson.ArticleUrl = result.ArticleUrl;
                    lesson.DownloadUrl = result.ExternalLink;
                    await CourseService.UpdateLessonAsync(lesson);
                    await LoadCourse();
                    await ShowSuccessModal("Lesson updated successfully!");
                }
                catch (Exception ex)
                {
                    await ShowErrorModal($"Error updating lesson: {ex.Message}");
                }
            }
        };
        showLessonModal = true;
        StateHasChanged();
    }

    private async Task DeleteLesson(int lessonId)
    {
        await ShowConfirmModal("Delete Lesson", "Are you sure you want to delete this lesson?", async (confirmed) =>
        {
            if (confirmed)
            {
                try
                {
                    await CourseService.DeleteLessonAsync(lessonId);
                    // Reload course to get updated modules
                    await LoadCourse();
                    await ShowSuccessModal("Lesson deleted successfully!");
                }
                catch (Exception ex)
                {
                    await ShowErrorModal($"Error deleting lesson: {ex.Message}");
                }
            }
        });
    }

    private async Task TriggerFileUpload()
    {
        // Simulate file upload process
        isUploading = true;
        uploadProgress = 0;
        
        // Simulate progress
        for (int i = 0; i <= 100; i += 10)
        {
            uploadProgress = i;
            StateHasChanged();
            await Task.Delay(200);
        }
        
        isUploading = false;
        await JS.InvokeVoidAsync("alert", "File upload functionality implemented! File uploaded successfully.");
    }

    private async Task UploadVideo()
    {
        // Simulate video upload
        isUploading = true;
        uploadProgress = 0;
        
        for (int i = 0; i <= 100; i += 5)
        {
            uploadProgress = i;
            StateHasChanged();
            await Task.Delay(300);
        }
        
        isUploading = false;
        await JS.InvokeVoidAsync("alert", "Video upload functionality implemented! Video uploaded successfully.");
    }

    private async Task UploadDocument()
    {
        // Simulate document upload
        isUploading = true;
        uploadProgress = 0;
        
        for (int i = 0; i <= 100; i += 15)
        {
            uploadProgress = i;
            StateHasChanged();
            await Task.Delay(150);
        }
        
        isUploading = false;
        await JS.InvokeVoidAsync("alert", "Document upload functionality implemented! Document uploaded successfully.");
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/instructor/courses");
    }

    private Task ShowInfoModal(string title, string message, string icon = "")
    {
        modalTitle = title;
        modalMessage = message;
        modalOkText = "OK";
        modalShowCancel = false;
        modalIcon = icon;
        showModal = true;
        modalCallback = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private Task ShowErrorModal(string message)
    {
        return ShowInfoModal("Error", message, "<svg class='w-6 h-6 text-red-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'/></svg>");
    }
    private Task ShowSuccessModal(string message, Func<Task>? okCallback = null)
    {
        modalTitle = "Success";
        modalMessage = message;
        modalOkText = "OK";
        modalShowCancel = false;
        modalIcon = "<svg class='w-6 h-6 text-green-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 13l4 4L19 7'/></svg>";
        showModal = true;
        modalCallback = null;
        modalOkCallback = okCallback;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private Task ShowConfirmModal(string title, string message, Func<bool, Task> callback)
    {
        modalTitle = title;
        modalMessage = message;
        modalOkText = "Yes";
        modalCancelText = "No";
        modalShowCancel = true;
        modalIcon = "<svg class='w-6 h-6 text-yellow-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>";
        showModal = true;
        modalCallback = callback;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private async Task OnModalClose(bool ok)
    {
        showModal = false;
        StateHasChanged();
        if (modalCallback != null)
        {
            await modalCallback(ok);
        }
        else if (ok && modalOkCallback != null)
        {
            var cb = modalOkCallback;
            modalOkCallback = null;
            await cb();
        }
    }
    private async Task OnInputModalClose((bool ok, string value) result)
    {
        showInputModal = false;
        StateHasChanged();
        if (result.ok && inputModalCallback != null)
        {
            await inputModalCallback(result.value);
        }
    }
    private async Task OnLessonModalClose((bool ok, TailwindLessonModal.LessonModalResult value) result)
    {
        showLessonModal = false;
        StateHasChanged();
        if (result.ok && lessonModalCallback != null)
        {
            await lessonModalCallback(result.value);
        }
    }
} 