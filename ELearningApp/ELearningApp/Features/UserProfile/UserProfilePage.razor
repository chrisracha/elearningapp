@page "/profile"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@using ELearningApp.Features.UserProfile.Components
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IUserService UserService
@inject ICourseService CourseService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Profile - @(currentUser?.FirstName ?? "User") @(currentUser?.LastName ?? "")</PageTitle>

<div class="min-h-screen bg-gray-50">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        <!-- Profile Header -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
            <div class="p-6">
                <div class="flex items-center space-x-6">
                    <!-- Profile Image -->
                    <div class="relative">
                        <div class="w-24 h-24 bg-gradient-to-br from-primary-400 to-primary-600 rounded-full flex items-center justify-center text-white text-2xl font-bold">
                            @if (!string.IsNullOrEmpty(currentUser?.ProfileImageUrl))
                            {
                                <img src="@currentUser.ProfileImageUrl" alt="Profile" class="w-24 h-24 rounded-full object-cover" />
                            }
                            else
                            {
                                @(currentUser?.FirstName?.FirstOrDefault() ?? 'U')@(currentUser?.LastName?.FirstOrDefault() ?? 'U')
                            }
                        </div>
                        <button @onclick="() => SetActiveTab(ProfileTab.EditProfile)" 
                                class="absolute -bottom-1 -right-1 w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white hover:bg-primary-700 transition-colors">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                            </svg>
                        </button>
                    </div>

                    <!-- User Info -->
                    <div class="flex-1">
                        <h1 class="text-2xl font-bold text-gray-900">
                            @(currentUser?.FirstName ?? "User") @(currentUser?.LastName ?? "")
                        </h1>
                        <p class="text-gray-600">@currentUser?.Email</p>
                        @if (currentUser?.IsInstructor == true)
                        {
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 mt-2">
                                <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                Instructor
                            </span>
                        }
                        else
                        {
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mt-2">
                                <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"></path>
                                </svg>
                                Student
                            </span>
                        }
                    </div>

                    <!-- Quick Stats -->
                    <div class="text-right">
                        <div class="grid grid-cols-2 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-primary-600">@enrolledCoursesCount</div>
                                <div class="text-sm text-gray-500">Courses</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-600">@completedCoursesCount</div>
                                <div class="text-sm text-gray-500">Completed</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content with Tabs -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <!-- Tab Navigation -->
            <div class="border-b border-gray-200">
                <nav class="flex space-x-8 px-6" aria-label="Tabs">
                    <button @onclick="() => SetActiveTab(ProfileTab.Overview)"
                            class="@GetTabClasses(ProfileTab.Overview) py-4 px-1 border-b-2 font-medium text-sm">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                        Overview
                    </button>
                    <button @onclick="() => SetActiveTab(ProfileTab.EditProfile)"
                            class="@GetTabClasses(ProfileTab.EditProfile) py-4 px-1 border-b-2 font-medium text-sm">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                        </svg>
                        Edit Profile
                    </button>
                    <button @onclick="() => SetActiveTab(ProfileTab.LearningProgress)"
                            class="@GetTabClasses(ProfileTab.LearningProgress) py-4 px-1 border-b-2 font-medium text-sm">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                        Learning Progress
                    </button>
                    <button @onclick="() => SetActiveTab(ProfileTab.AccountSettings)"
                            class="@GetTabClasses(ProfileTab.AccountSettings) py-4 px-1 border-b-2 font-medium text-sm">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        Account Settings
                    </button>
                    @if (currentUser?.IsInstructor == true)
                    {
                        <button @onclick="() => SetActiveTab(ProfileTab.InstructorTools)"
                                class="@GetTabClasses(ProfileTab.InstructorTools) py-4 px-1 border-b-2 font-medium text-sm">
                            <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                            </svg>
                            Instructor Tools
                        </button>
                    }
                </nav>
            </div>

            <!-- Tab Content -->
            <div class="p-6">
                @if (activeTab == ProfileTab.Overview)
                {
                    <ProfileOverviewTab User="currentUser" Enrollments="enrollments" />
                }
                else if (activeTab == ProfileTab.EditProfile)
                {
                    <EditProfileTab User="currentUser" OnProfileUpdated="OnProfileUpdated" />
                }
                else if (activeTab == ProfileTab.LearningProgress)
                {
                    <LearningProgressTab Enrollments="enrollments" />
                }
                else if (activeTab == ProfileTab.AccountSettings)
                {
                    <AccountSettingsTab User="currentUser" />
                }
                else if (activeTab == ProfileTab.InstructorTools && currentUser?.IsInstructor == true)
                {
                    <InstructorToolsTab User="currentUser" />
                }
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser? currentUser;
    private List<Enrollment> enrollments = new();
    private ProfileTab activeTab = ProfileTab.Overview;

    // Stats
    private int enrolledCoursesCount = 0;
    private int completedCoursesCount = 0;

    private enum ProfileTab
    {
        Overview,
        EditProfile,
        LearningProgress,
        AccountSettings,
        InstructorTools
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        try
        {
            currentUser = await UserService.GetCurrentUserAsync();
            
            if (currentUser != null)
            {
                enrollments = (await CourseService.GetUserEnrollmentsAsync(currentUser.Id)).ToList();
                enrolledCoursesCount = enrollments.Count;
                completedCoursesCount = enrollments.Count(e => e.ProgressPercentage >= 100);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading user data:", ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void SetActiveTab(ProfileTab tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private string GetTabClasses(ProfileTab tab)
    {
        return activeTab == tab 
            ? "border-primary-500 text-primary-600" 
            : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300";
    }

    private async Task OnProfileUpdated()
    {
        await LoadUserData();
    }
}