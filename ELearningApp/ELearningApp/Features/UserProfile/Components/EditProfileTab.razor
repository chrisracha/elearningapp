@using ELearningApp.Models.Entities
@using ELearningApp.Services
@inject IUserService UserService
@inject IJSRuntime JS

<div class="space-y-6">
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-blue-800">Profile Information</h3>
                <div class="mt-2 text-sm text-blue-700">
                    <p>Update your personal information and profile details. This information will be visible to other users.</p>
                </div>
            </div>
        </div>
    </div>

    <form @onsubmit="SaveProfile" class="space-y-6">
        <!-- Basic Information -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Basic Information</h3>
            </div>
            <div class="p-6 space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="firstName" class="block text-sm font-medium text-gray-700">First Name</label>
                        <input type="text" id="firstName" @bind="profileData.FirstName" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm" />
                        @if (!string.IsNullOrEmpty(validationErrors.FirstName))
                        {
                            <p class="mt-1 text-sm text-red-600">@validationErrors.FirstName</p>
                        }
                    </div>
                    <div>
                        <label for="lastName" class="block text-sm font-medium text-gray-700">Last Name</label>
                        <input type="text" id="lastName" @bind="profileData.LastName" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm" />
                        @if (!string.IsNullOrEmpty(validationErrors.LastName))
                        {
                            <p class="mt-1 text-sm text-red-600">@validationErrors.LastName</p>
                        }
                    </div>
                </div>

                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
                    <input type="email" id="email" @bind="profileData.Email" readonly
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm bg-gray-50 sm:text-sm" />
                    <p class="mt-1 text-sm text-gray-500">Email address cannot be changed from this page.</p>
                </div>

                <div>
                    <label for="bio" class="block text-sm font-medium text-gray-700">Bio</label>
                    <textarea id="bio" @bind="profileData.Bio" rows="4"
                              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                              placeholder="Tell us about yourself..."></textarea>
                    <p class="mt-1 text-sm text-gray-500">A brief description about yourself (optional).</p>
                </div>
            </div>
        </div>

        <!-- Professional Information -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Professional Information</h3>
            </div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="companyName" class="block text-sm font-medium text-gray-700">Company/Organization</label>
                    <input type="text" id="companyName" @bind="profileData.CompanyName" 
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="Your company or organization" />
                </div>

                <div>
                    <label for="websiteUrl" class="block text-sm font-medium text-gray-700">Website</label>
                    <input type="url" id="websiteUrl" @bind="profileData.WebsiteUrl" 
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="https://yourwebsite.com" />
                </div>
            </div>
        </div>

        <!-- Social Media Links -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Social Media Links</h3>
            </div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="linkedinUrl" class="block text-sm font-medium text-gray-700">LinkedIn</label>
                    <div class="mt-1 relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.338 16.338H13.67V12.16c0-.995-.017-2.277-1.387-2.277-1.39 0-1.601 1.086-1.601 2.207v4.248H8.014v-8.59h2.559v1.174h.037c.356-.675 1.227-1.387 2.526-1.387 2.703 0 3.203 1.778 3.203 4.092v4.711zM5.005 6.575a1.548 1.548 0 11-.003-3.096 1.548 1.548 0 01.003 3.096zm-1.337 9.763H6.34v-8.59H3.667v8.59zM17.668 1H2.328C1.595 1 1 1.581 1 2.298v15.403C1 18.418 1.595 19 2.328 19h15.34c.734 0 1.332-.582 1.332-1.299V2.298C19 1.581 18.402 1 17.668 1z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                        <input type="url" id="linkedinUrl" @bind="profileData.LinkedInUrl" 
                               class="pl-10 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                               placeholder="https://linkedin.com/in/yourprofile" />
                    </div>
                </div>

                <div>
                    <label for="twitterUrl" class="block text-sm font-medium text-gray-700">Twitter/X</label>
                    <div class="mt-1 relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M6.29 18.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0020 3.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.073 4.073 0 01.8 7.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 010 16.407a11.616 11.616 0 006.29 1.84"></path>
                            </svg>
                        </div>
                        <input type="url" id="twitterUrl" @bind="profileData.TwitterUrl" 
                               class="pl-10 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                               placeholder="https://twitter.com/yourhandle" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Profile Picture -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Profile Picture</h3>
            </div>
            <div class="p-6">
                <div class="flex items-center space-x-6">
                    <div class="relative">
                        <div class="w-20 h-20 bg-gradient-to-br from-primary-400 to-primary-600 rounded-full flex items-center justify-center text-white text-xl font-bold">
                            @if (!string.IsNullOrEmpty(profileData.ProfileImageUrl))
                            {
                                <img src="@profileData.ProfileImageUrl" alt="Profile" class="w-20 h-20 rounded-full object-cover" />
                            }
                            else
                            {
                                @(profileData.FirstName?.FirstOrDefault() ?? 'U')@(profileData.LastName?.FirstOrDefault() ?? 'U')
                            }
                        </div>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm text-gray-600">Profile picture upload will be available in a future update.</p>
                        <p class="text-xs text-gray-500 mt-1">For now, we use your initials as your profile picture.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Save Button -->
        <div class="flex justify-end space-x-3">
            <button type="button" @onclick="ResetForm" 
                    class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                Reset
            </button>
            <button type="submit" disabled="@isSaving"
                    class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed">
                @if (isSaving)
                {
                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Changes</span>
                }
            </button>
        </div>
    </form>
</div>

@code {
    [Parameter] public ApplicationUser? User { get; set; }
    [Parameter] public EventCallback OnProfileUpdated { get; set; }

    private ProfileData profileData = new();
    private ValidationErrors validationErrors = new();
    private bool isSaving = false;

    protected override void OnParametersSet()
    {
        if (User != null)
        {
            profileData = new ProfileData
            {
                FirstName = User.FirstName,
                LastName = User.LastName,
                Email = User.Email ?? "",
                Bio = User.Bio ?? "",
                CompanyName = User.CompanyName ?? "",
                WebsiteUrl = User.WebsiteUrl ?? "",
                LinkedInUrl = User.LinkedInUrl ?? "",
                TwitterUrl = User.TwitterUrl ?? "",
                ProfileImageUrl = User.ProfileImageUrl ?? ""
            };
        }
    }

    private async Task SaveProfile()
    {
        if (User == null) return;

        try
        {
            isSaving = true;
            validationErrors = new ValidationErrors();

            // Validate required fields
            if (string.IsNullOrWhiteSpace(profileData.FirstName))
                validationErrors.FirstName = "First name is required.";
            if (string.IsNullOrWhiteSpace(profileData.LastName))
                validationErrors.LastName = "Last name is required.";

            if (validationErrors.HasErrors())
            {
                StateHasChanged();
                return;
            }

            // Update user data
            User.FirstName = profileData.FirstName.Trim();
            User.LastName = profileData.LastName.Trim();
            User.Bio = profileData.Bio?.Trim();
            User.CompanyName = profileData.CompanyName?.Trim();
            User.WebsiteUrl = profileData.WebsiteUrl?.Trim();
            User.LinkedInUrl = profileData.LinkedInUrl?.Trim();
            User.TwitterUrl = profileData.TwitterUrl?.Trim();
            User.UpdatedAt = DateTime.UtcNow;

            var success = await UserService.UpdateUserAsync(User);
            
            if (success)
            {
                await JS.InvokeVoidAsync("alert", "Profile updated successfully!");
                await OnProfileUpdated.InvokeAsync();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to update profile. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error updating profile: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        OnParametersSet();
        validationErrors = new ValidationErrors();
        StateHasChanged();
    }

    private class ProfileData
    {
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Bio { get; set; } = "";
        public string CompanyName { get; set; } = "";
        public string WebsiteUrl { get; set; } = "";
        public string LinkedInUrl { get; set; } = "";
        public string TwitterUrl { get; set; } = "";
        public string ProfileImageUrl { get; set; } = "";
    }

    private class ValidationErrors
    {
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Email { get; set; } = "";

        public bool HasErrors() => !string.IsNullOrEmpty(FirstName) || !string.IsNullOrEmpty(LastName) || !string.IsNullOrEmpty(Email);
    }
} 