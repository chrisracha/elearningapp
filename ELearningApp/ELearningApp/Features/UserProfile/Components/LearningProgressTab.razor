@using ELearningApp.Models.Entities
@using ELearningApp.Models.Enums
@using ELearningApp.Features.Shared
@inject IJSRuntime JS

<TailwindModal Show="@showModal" Title="@modalTitle" Message="@modalMessage" OkText="@modalOkText" CancelText="@modalCancelText" ShowCancel="@modalShowCancel" Icon="@modalIcon" OnClose="OnModalClose" />

<div class="space-y-6">
    <!-- Progress Overview -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Learning Progress Overview</h3>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="text-center">
                    <div class="text-3xl font-bold text-primary-600">@Enrollments.Count</div>
                    <div class="text-sm text-gray-500">Total Courses</div>
                </div>
                <div class="text-center">
                    <div class="text-3xl font-bold text-green-600">@Enrollments.Count(e => e.ProgressPercentage >= 100)</div>
                    <div class="text-sm text-gray-500">Completed</div>
                </div>
                <div class="text-center">
                    <div class="text-3xl font-bold text-blue-600">@Enrollments.Count(e => e.ProgressPercentage > 0 && e.ProgressPercentage < 100)</div>
                    <div class="text-sm text-gray-500">In Progress</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Course Progress -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Course Progress</h3>
        </div>
        <div class="p-6">
            @if (Enrollments.Any())
            {
                <div class="space-y-4">
                    @foreach (var enrollment in Enrollments.OrderByDescending(e => e.ProgressPercentage))
                    {
                        <div class="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow">
                            <div class="flex items-center space-x-4">
                                <!-- Course Image -->
                                <div class="flex-shrink-0">
                                    <div class="w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center">
                                        @if (!string.IsNullOrEmpty(enrollment.Course.ImageUrl))
                                        {
                                            <img src="@enrollment.Course.ImageUrl" alt="@enrollment.Course.Title" class="w-16 h-16 rounded-lg object-cover" />
                                        }
                                        else
                                        {
                                            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                            </svg>
                                        }
                                    </div>
                                </div>

                                <!-- Course Info -->
                                <div class="flex-1 min-w-0">
                                    <h4 class="text-lg font-medium text-gray-900 truncate">@enrollment.Course.Title</h4>
                                    <p class="text-sm text-gray-500">@enrollment.Course.Instructor.FirstName @enrollment.Course.Instructor.LastName</p>
                                    
                                    <!-- Progress Bar -->
                                    <div class="mt-2">
                                        <div class="flex items-center justify-between text-sm">
                                            <span class="text-gray-600">Progress</span>
                                            <span class="font-medium text-gray-900">@((int)enrollment.ProgressPercentage)%</span>
                                        </div>
                                        <div class="mt-1 bg-gray-200 rounded-full h-2">
                                            <div class="bg-primary-600 h-2 rounded-full transition-all duration-300" 
                                                 style="width: @(enrollment.ProgressPercentage)%"></div>
                                        </div>
                                    </div>

                                    <!-- Course Stats -->
                                    <div class="mt-2 flex items-center space-x-4 text-xs text-gray-500">
                                        <span>Enrolled: @enrollment.EnrollmentDate.ToString("MMM dd, yyyy")</span>
                                        @if (enrollment.LastAccessedDate.HasValue)
                                        {
                                            <span>Last accessed: @enrollment.LastAccessedDate.Value.ToString("MMM dd, yyyy")</span>
                                        }
                                        @if (enrollment.TimeSpentMinutes > 0)
                                        {
                                            <span>@(enrollment.TimeSpentMinutes / 60)h @(enrollment.TimeSpentMinutes % 60)m spent</span>
                                        }
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="flex-shrink-0">
                                    <div class="flex flex-col space-y-2">
                                        @if (enrollment.ProgressPercentage >= 100)
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                                </svg>
                                                Completed
                                            </span>
                                            <button @onclick="() => ViewCertificate(enrollment.CourseId)"
                                                    class="text-sm text-primary-600 hover:text-primary-700 font-medium">
                                                View Certificate
                                            </button>
                                        }
                                        else
                                        {
                                            <a href="/course/@enrollment.CourseId/learn" 
                                               class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                                                Continue Learning
                                            </a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No courses yet</h3>
                    <p class="mt-1 text-sm text-gray-500">Start learning to see your progress here.</p>
                    <div class="mt-6">
                        <a href="/catalog" 
                           class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                            Browse Courses
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Learning Statistics -->
    @if (Enrollments.Any())
    {
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Learning Statistics</h3>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <div class="text-center">
                        <div class="text-2xl font-bold text-blue-600">@(Enrollments.Sum(e => e.TimeSpentMinutes) / 60)</div>
                        <div class="text-sm text-gray-500">Total Study Hours</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold text-green-600">@(Enrollments.Any() ? Enrollments.Average(e => e.Course.AverageRating).ToString("F1") : "0.0")</div>
                        <div class="text-sm text-gray-500">Average Course Rating</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold text-purple-600">@Enrollments.Count(e => e.Course.Level == CourseLevel.Advanced || e.Course.Level == CourseLevel.Expert)</div>
                        <div class="text-sm text-gray-500">Advanced Courses</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold text-orange-600">@Enrollments.Select(e => e.Course.Category?.Name).Distinct().Count()</div>
                        <div class="text-sm text-gray-500">Categories Explored</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Achievements -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Recent Achievements</h3>
            </div>
            <div class="p-6">
                <div class="space-y-4">
                    @{
                        var recentCompletions = Enrollments
                            .Where(e => e.ProgressPercentage >= 100)
                            .OrderByDescending(e => e.CompletionDate ?? e.EnrollmentDate)
                            .Take(3);
                    }
                    
                    @if (recentCompletions.Any())
                    {
                        @foreach (var enrollment in recentCompletions)
                        {
                            <div class="flex items-center space-x-4 p-4 bg-green-50 rounded-lg border border-green-200">
                                <div class="flex-shrink-0">
                                    <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                                        <svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                </div>
                                <div class="flex-1">
                                    <p class="text-sm font-medium text-gray-900">Completed "@enrollment.Course.Title"</p>
                                    <p class="text-sm text-gray-500">
                                        @((enrollment.CompletionDate ?? enrollment.EnrollmentDate).ToString("MMM dd, yyyy"))
                                    </p>
                                </div>
                                <div class="flex-shrink-0">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        Achievement
                                    </span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-8">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No achievements yet</h3>
                            <p class="mt-1 text-sm text-gray-500">Complete your first course to earn achievements!</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public List<Enrollment> Enrollments { get; set; } = new();

    // Modal state
    private bool showModal = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private string modalOkText = "OK";
    private string modalCancelText = "Cancel";
    private bool modalShowCancel = false;
    private string modalIcon = "";
    private Func<bool, Task>? modalCallback;

    private async Task ViewCertificate(int courseId)
    {
        await ShowInfoModal("Coming Soon", "Certificate viewing will be implemented in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private Task ShowInfoModal(string title, string message, string icon = "")
    {
        modalTitle = title;
        modalMessage = message;
        modalOkText = "OK";
        modalShowCancel = false;
        modalIcon = icon;
        showModal = true;
        modalCallback = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnModalClose(bool ok)
    {
        showModal = false;
        StateHasChanged();
        if (modalCallback != null)
        {
            await modalCallback(ok);
        }
    }
} 