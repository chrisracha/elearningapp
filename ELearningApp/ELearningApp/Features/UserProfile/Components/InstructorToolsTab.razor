@using ELearningApp.Models.Entities
@using ELearningApp.Services
@using ELearningApp.Features.Shared
@inject ICourseService CourseService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<TailwindModal Show="@showModal" Title="@modalTitle" Message="@modalMessage" OkText="@modalOkText" CancelText="@modalCancelText" ShowCancel="@modalShowCancel" Icon="@modalIcon" OnClose="OnModalClose" />

<div class="space-y-6">
    <!-- Instructor Dashboard Link -->
    @if (User?.IsInstructor == true)
    {
        <div class="bg-purple-50 border border-purple-200 rounded-lg p-6">
            <div class="flex items-center space-x-4">
                <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                    </svg>
                </div>
                <div class="flex-1">
                    <h3 class="text-lg font-semibold text-gray-900">Instructor Dashboard</h3>
                    <p class="text-sm text-gray-600">Manage your courses, students, and content</p>
                </div>
                <a href="/instructor/courses" 
                   class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700">
                    Go to Dashboard
                </a>
            </div>
        </div>
    }

    <!-- Quick Actions -->
    <div class="bg-white border border-gray-200 rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Quick Actions</h3>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                @if (User?.IsInstructor == true)
                {
                    <a href="/instructor/create-course" 
                       class="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                        <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-4">
                            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                        </div>
                        <div>
                            <h4 class="font-medium text-gray-900">Create New Course</h4>
                            <p class="text-sm text-gray-600">Start building your next course</p>
                        </div>
                    </a>
                }
                
                <a href="/catalog" 
                   class="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div class="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-4">
                        <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                    <div>
                        <h4 class="font-medium text-gray-900">Browse Courses</h4>
                        <p class="text-sm text-gray-600">Discover new learning opportunities</p>
                    </div>
                </a>
                
                <a href="/dashboard" 
                   class="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mr-4">
                        <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                    </div>
                    <div>
                        <h4 class="font-medium text-gray-900">My Learning Dashboard</h4>
                        <p class="text-sm text-gray-600">View your learning progress</p>
                    </div>
                </a>
                
                <a href="/profile" 
                   class="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div class="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center mr-4">
                        <svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </div>
                    <div>
                        <h4 class="font-medium text-gray-900">Edit Profile</h4>
                        <p class="text-sm text-gray-600">Update your personal information</p>
                    </div>
                </a>
            </div>
        </div>
    </div>

    <!-- Platform Features -->
    <div class="bg-white border border-gray-200 rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Platform Features</h3>
        </div>
        <div class="p-6">
            <div class="space-y-4">
                <div class="flex items-start space-x-3">
                    <svg class="w-5 h-5 text-green-500 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    <div>
                        <h4 class="font-medium text-gray-900">Interactive Learning</h4>
                        <p class="text-sm text-gray-600">Engage with multimedia content including videos, articles, and interactive exercises</p>
                    </div>
                </div>
                
                <div class="flex items-start space-x-3">
                    <svg class="w-5 h-5 text-green-500 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    <div>
                        <h4 class="font-medium text-gray-900">Progress Tracking</h4>
                        <p class="text-sm text-gray-600">Monitor your learning progress with detailed analytics and completion tracking</p>
                    </div>
                </div>
                
                <div class="flex items-start space-x-3">
                    <svg class="w-5 h-5 text-green-500 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    <div>
                        <h4 class="font-medium text-gray-900">Mobile Access</h4>
                        <p class="text-sm text-gray-600">Learn on the go with our responsive design that works on any device</p>
                    </div>
                </div>
                
                @if (User?.IsInstructor == true)
                {
                    <div class="flex items-start space-x-3">
                        <svg class="w-5 h-5 text-green-500 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <div>
                            <h4 class="font-medium text-gray-900">Course Creation Tools</h4>
                            <p class="text-sm text-gray-600">Create and manage courses with our comprehensive content management system</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public ApplicationUser? User { get; set; }

    private InstructorStats instructorStats = new();
    private List<Course> recentCourses = new();

    // Modal state
    private bool showModal = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private string modalOkText = "OK";
    private string modalCancelText = "Cancel";
    private bool modalShowCancel = false;
    private string modalIcon = "";
    private Func<bool, Task>? modalCallback;

    protected override async Task OnInitializedAsync()
    {
        if (User != null)
        {
            await LoadInstructorData();
        }
    }

    private async Task LoadInstructorData()
    {
        try
        {
            // Load instructor courses
            recentCourses = (await CourseService.GetCoursesByInstructorAsync(User!.Id)).ToList();

            // Calculate stats
            instructorStats = new InstructorStats
            {
                TotalCourses = recentCourses.Count,
                TotalEnrollments = recentCourses.Sum(c => c.EnrollmentCount),
                AverageRating = recentCourses.Any() ? recentCourses.Average(c => c.AverageRating) : 0,
                TotalRevenue = recentCourses.Sum(c => c.EnrollmentCount * 0) // Free courses for now
            };
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading instructor data:", ex.Message);
        }
    }

    private async Task ShowAnalytics()
    {
        await ShowInfoModal("Coming Soon", "Analytics dashboard will be implemented in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private async Task ShowEarnings()
    {
        await ShowInfoModal("Coming Soon", "Earnings dashboard will be implemented in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private async Task ShowStudents()
    {
        await ShowInfoModal("Coming Soon", "Student management will be implemented in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private async Task ShowSettings()
    {
        await ShowInfoModal("Coming Soon", "Instructor settings will be implemented in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private async Task ShowInstructorGuide()
    {
        await ShowInfoModal("Coming Soon", "Instructor guide will be available in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private async Task ShowBestPractices()
    {
        await ShowInfoModal("Coming Soon", "Best practices guide will be available in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private async Task ShowCommunity()
    {
        await ShowInfoModal("Coming Soon", "Instructor community will be launched in Phase 2", "<svg class='w-6 h-6 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/></svg>");
    }

    private Task ShowInfoModal(string title, string message, string icon = "")
    {
        modalTitle = title;
        modalMessage = message;
        modalOkText = "OK";
        modalShowCancel = false;
        modalIcon = icon;
        showModal = true;
        modalCallback = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnModalClose(bool ok)
    {
        showModal = false;
        StateHasChanged();
        if (modalCallback != null)
        {
            await modalCallback(ok);
        }
    }

    private class InstructorStats
    {
        public int TotalCourses { get; set; }
        public int TotalEnrollments { get; set; }
        public double AverageRating { get; set; }
        public decimal TotalRevenue { get; set; }
    }
}