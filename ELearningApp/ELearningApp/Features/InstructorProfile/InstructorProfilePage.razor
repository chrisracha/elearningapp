@page "/instructor/{instructorId}"
@using ELearningApp.Models.Entities
@using ELearningApp.Models.DTOs
@using ELearningApp.Models.Enums
@using ELearningApp.Services
@inject ICourseService CourseService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>@(instructor?.FirstName ?? "Loading...") @(instructor?.LastName ?? "") - Instructor Profile</PageTitle>

<div class="min-h-screen bg-gray-50">
    @if (isLoading)
    {
        <div class="flex justify-center items-center min-h-screen">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
        </div>
    }
    else if (instructor != null)
    {
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            
            <!-- Instructor Header -->
            <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
                <div class="flex items-start space-x-6">
                    <!-- Instructor Avatar/Logo -->
                    <div class="flex-shrink-0">
                        <div class="w-32 h-32 bg-gray-200 rounded-lg flex items-center justify-center">
                            @if (!string.IsNullOrEmpty(instructor.ProfileImageUrl))
                            {
                                <img src="@instructor.ProfileImageUrl" alt="@instructor.FirstName @instructor.LastName" class="w-full h-full object-cover rounded-lg">
                            }
                            else
                            {
                                <div class="text-center">
                                    <svg class="w-16 h-16 text-gray-400 mx-auto mb-2" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                                    </svg>
                                    <span class="text-sm text-gray-600">Logo</span>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Instructor Info -->
                    <div class="flex-1">
                        <div class="mb-4">
                            <span class="text-sm font-medium text-gray-500 uppercase tracking-wide">INSTRUCTOR</span>
                            <h1 class="text-4xl font-bold text-gray-900 mt-1">
                                @instructor.FirstName @instructor.LastName
                            </h1>
                        </div>

                        <!-- Stats -->
                        <div class="flex items-center space-x-8 mb-6">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-gray-900">@totalStudents.ToString("N0")</div>
                                <div class="text-sm text-gray-600">LEARNERS</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-gray-900">@totalReviews.ToString("N0")</div>
                                <div class="text-sm text-gray-600">REVIEWS</div>
                            </div>
                        </div>

                        <!-- External Links -->
                        <div class="mb-6">
                            <h3 class="text-sm font-medium text-gray-900 mb-3">External Links</h3>
                            <div class="flex space-x-3">
                                @if (!string.IsNullOrEmpty(instructor.WebsiteUrl))
                                {
                                    <a href="@instructor.WebsiteUrl" target="_blank" 
                                       class="w-8 h-8 bg-gray-200 rounded border border-gray-300 flex items-center justify-center hover:bg-gray-300 transition-colors">
                                        <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                        </svg>
                                    </a>
                                }
                                @if (!string.IsNullOrEmpty(instructor.LinkedInUrl))
                                {
                                    <a href="@instructor.LinkedInUrl" target="_blank" 
                                       class="w-8 h-8 bg-gray-200 rounded border border-gray-300 flex items-center justify-center hover:bg-gray-300 transition-colors">
                                        <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.338 16.338H13.67V12.16c0-.995-.017-2.277-1.387-2.277-1.39 0-1.601 1.086-1.601 2.207v4.248H8.014v-8.59h2.559v1.174h.037c.356-.675 1.227-1.387 2.526-1.387 2.703 0 3.203 1.778 3.203 4.092v4.711zM5.005 6.575a1.548 1.548 0 11-.003-3.096 1.548 1.548 0 01.003 3.096zm-1.337 9.763H6.34v-8.59H3.667v8.59zM17.668 1H2.328C1.595 1 1 1.581 1 2.298v15.403C1 18.418 1.595 19 2.328 19h15.34c.734 0 1.332-.582 1.332-1.299V2.298C19 1.581 18.402 1 17.668 1z" clip-rule="evenodd"></path>
                                        </svg>
                                    </a>
                                }
                                @if (!string.IsNullOrEmpty(instructor.TwitterUrl))
                                {
                                    <a href="@instructor.TwitterUrl" target="_blank" 
                                       class="w-8 h-8 bg-gray-200 rounded border border-gray-300 flex items-center justify-center hover:bg-gray-300 transition-colors">
                                        <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M6.29 18.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0020 3.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.073 4.073 0 01.8 7.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 010 16.407a11.616 11.616 0 006.29 1.84"></path>
                                        </svg>
                                    </a>
                                }
                                <!-- Placeholder links if none provided -->
                                @if (string.IsNullOrEmpty(instructor.WebsiteUrl) && string.IsNullOrEmpty(instructor.LinkedInUrl) && string.IsNullOrEmpty(instructor.TwitterUrl))
                                {
                                    @for (int i = 0; i < 3; i++)
                                    {
                                        <div class="w-8 h-8 bg-gray-200 rounded border border-gray-300 flex items-center justify-center">
                                            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                            </svg>
                                        </div>
                                    }
                                }
                            </div>
                        </div>

                        <!-- Bio/Description -->
                        <div class="prose prose-gray max-w-none">
                            @if (!string.IsNullOrEmpty(instructor.Bio))
                            {
                                @foreach (var paragraph in instructor.Bio.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <p class="text-gray-700 leading-relaxed mb-4">@paragraph</p>
                                }
                            }
                            else
                            {
                                <p class="text-gray-700 leading-relaxed mb-4">
                                    @instructor.FirstName @instructor.LastName is a technology startup instructor, founded by expert professionals. 
                                    With expertise in modern development technologies, they bring practical experience to help students succeed in their learning journey.
                                </p>
                                <p class="text-gray-700 leading-relaxed mb-4">
                                    Our instructor specializes in delivering high-quality educational content with focus on real-world applications. 
                                    Over the years, the company has been active in various educational initiatives and training programs.
                                </p>
                                <p class="text-gray-700 leading-relaxed mb-4">
                                    We operate as a specialized provider in software development and technology education. Our focus is on developing applications that allow 
                                    organizations and students to streamline operations and accelerate digital transformation. 
                                    Our approach follows proven methodologies to ensure quality and deliver lasting value.
                                </p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Instructor Courses -->
            <div class="mb-8">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">Courses by @instructor.FirstName @instructor.LastName</h2>
                
                @if (instructorCourses.Any())
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                        @foreach (var course in instructorCourses.Take(6))
                        {
                            <div class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow cursor-pointer"
                                 @onclick="() => ViewCourse(course.Id)">
                                <!-- Course Image -->
                                <div class="h-48 bg-gray-200 flex items-center justify-center">
                                    @if (!string.IsNullOrEmpty(course.ImageUrl))
                                    {
                                        <img src="@course.ImageUrl" alt="@course.Title" class="w-full h-full object-cover">
                                    }
                                    else
                                    {
                                        <div class="text-gray-400">Course Image</div>
                                    }
                                </div>
                                
                                <!-- Course Content -->
                                <div class="p-6">
                                    <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">@course.Title</h3>
                                    <p class="text-sm text-gray-600 mb-2">@course.Instructor.FirstName @course.Instructor.LastName</p>
                                    <p class="text-xs text-gray-500 mb-4 line-clamp-3">
                                        This is an example of a paragraph of text that has basic HTML formatting applied.
                                    </p>
                                    
                                    <div class="flex items-center justify-between">
                                        <span class="text-xl font-bold text-green-600">Free</span>
                                        <button class="px-4 py-2 border border-gray-300 rounded text-sm font-medium text-gray-700 hover:bg-gray-50">
                                            Enroll
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination (if needed) -->
                    @if (instructorCourses.Count() > 6)
                    {
                        <div class="flex justify-center">
                            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                @for (int i = 1; i <= Math.Ceiling((double)instructorCourses.Count() / 6); i++)
                                {
                                    var page = i;
                                    <button @onclick="() => ChangePage(page)"
                                            class="@GetPageButtonClasses(page) relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                        @(page)
                                    </button>
                                }
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-12">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">No courses yet</h3>
                        <p class="mt-1 text-sm text-gray-500">This instructor hasn't published any courses yet.</p>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="max-w-4xl mx-auto p-6">
            <div class="bg-white rounded-lg shadow-lg p-8 text-center">
                <h2 class="text-xl font-semibold text-gray-900 mb-2">Instructor Not Found</h2>
                <p class="text-gray-600 mb-6">The instructor profile you're looking for doesn't exist.</p>
                <a href="/catalog" 
                   class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                    Browse Courses
                </a>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string InstructorId { get; set; } = string.Empty;

    private ApplicationUser? instructor;
    private List<Course> instructorCourses = new();
    private bool isLoading = true;
    private int totalStudents = 0;
    private int totalReviews = 0;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstructorData();
    }

    private async Task LoadInstructorData()
    {
        try
        {
            isLoading = true;
            instructor = await UserService.GetUserByIdAsync(InstructorId);
            
            if (instructor != null)
            {
                instructorCourses = (await CourseService.GetCoursesByInstructorAsync(InstructorId)).ToList();
                
                // Calculate stats
                totalStudents = instructorCourses.Sum(c => c.EnrollmentCount);
                totalReviews = instructorCourses.Sum(c => c.ReviewCount);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading instructor data:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewCourse(int courseId)
    {
        Navigation.NavigateTo($"/course/{courseId}");
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        StateHasChanged();
    }

    private string GetPageButtonClasses(int page)
    {
        return page == currentPage
            ? "bg-primary-50 border-primary-500 text-primary-600"
            : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50";
    }
} 