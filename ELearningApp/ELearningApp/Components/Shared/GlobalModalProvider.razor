@using ELearningApp.Services
@using static ELearningApp.Components.Shared.ModalDialog
@inject IModalService ModalService
@implements IDisposable

<style>
    .modal-container {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        z-index: 999999 !important;
        pointer-events: none !important;
    }
    
    .modal-container > * {
        pointer-events: auto !important;
    }
</style>

<div class="modal-container">
    <ModalDialog IsVisible="isModalVisible"
                 Title="@currentModal?.Title"
                 Message="@currentModal?.Message"
                 Type="@(currentModal?.Type ?? ModalType.Info)"
                 ConfirmText="@(currentModal?.ConfirmText ?? "Confirm")"
                 CancelText="@(currentModal?.CancelText ?? "Cancel")"
                 OnConfirmed="HandleConfirmed"
                 OnCancelled="HandleCancelled"
                 OnClosed="HandleClosed" />
</div>

@code {
    private bool isModalVisible = false;
    private ModalInfo? currentModal;

    protected override void OnInitialized()
    {
        ModalService.OnShowModal += ShowModal;
    }

    private async void ShowModal(ModalInfo modalInfo)
    {
        currentModal = modalInfo;
        isModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleConfirmed()
    {
        isModalVisible = false;
        if (currentModal?.OnConfirmed != null)
        {
            await currentModal.OnConfirmed();
        }
        currentModal = null;
        StateHasChanged();
    }

    private async Task HandleCancelled()
    {
        isModalVisible = false;
        if (currentModal?.OnCancelled != null)
        {
            await currentModal.OnCancelled();
        }
        currentModal = null;
        StateHasChanged();
    }

    private async Task HandleClosed()
    {
        isModalVisible = false;
        if (currentModal?.OnClosed != null)
        {
            await currentModal.OnClosed();
        }
        currentModal = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        ModalService.OnShowModal -= ShowModal;
    }
}