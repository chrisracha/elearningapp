@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ELearningApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login - E-Learning Platform</PageTitle>

<div class="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="bg-white shadow-xl rounded-lg p-8">
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-2">Login</h1>
                <div class="w-16 h-0.5 bg-primary-600 mx-auto"></div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
                    <div class="text-red-700 text-sm">@errorMessage</div>
                </div>
            }

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="space-y-6">
                <DataAnnotationsValidator />
                
                <div>
                    <label for="Input.Email" class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                    <InputText @bind-Value="Input.Email" 
                               id="Input.Email" 
                               class="w-full px-3 py-3 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                               autocomplete="username" 
                               aria-required="true" 
                               placeholder="Enter your email" />
                    <ValidationMessage For="() => Input.Email" class="mt-1 text-sm text-red-600" />
                </div>

                <div>
                    <label for="Input.Password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                    <div class="relative">
                        <InputText type="@passwordInputType" 
                                   @bind-Value="Input.Password" 
                                   id="Input.Password" 
                                   class="w-full px-3 py-3 pr-10 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                   autocomplete="current-password" 
                                   aria-required="true" 
                                   placeholder="Enter your password" />
                        <button type="button" 
                                @onclick="TogglePasswordVisibility"
                                class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600">
                            @if (showPassword)
                            {
                                <!-- Eye Slash Icon (Hide) -->
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                                </svg>
                            }
                            else
                            {
                                <!-- Eye Icon (Show) -->
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                </svg>
                            }
                        </button>
                    </div>
                    <ValidationMessage For="() => Input.Password" class="mt-1 text-sm text-red-600" />
                </div>

                <div class="flex items-center">
                    <div class="flex items-center h-5">
                        <InputCheckbox @bind-Value="Input.RememberMe" 
                                      id="Input.RememberMe"
                                      class="w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500" />
                    </div>
                    <div class="ml-3 text-sm">
                        <label for="Input.RememberMe" class="font-medium text-gray-700">
                            Remember me
                        </label>
                    </div>
                </div>

                <div>
                    <button type="submit" 
                            class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                        Log In
                    </button>
                </div>

                <div class="text-center">
                    <a href="Account/ForgotPassword" 
                       class="text-sm font-medium text-primary-600 hover:text-primary-500">
                        Forgot Password?
                    </a>
                </div>

                <div class="text-center">
                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-gray-300"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-white text-gray-500">OR</span>
                        </div>
                    </div>
                </div>

                <div class="text-center">
                    <p class="text-sm text-gray-600">
                        Don't have an account? 
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" 
                           class="font-medium text-primary-600 hover:text-primary-500">Sign up</a>
                    </p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool showPassword = false;
    private string passwordInputType => showPassword ? "text" : "password";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        StateHasChanged();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            // Redirect to 2FA page but user requested no 2FA
            // For now, we'll treat this as an error since 2FA is disabled
            errorMessage = "Two-factor authentication is not supported. Please contact support.";
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid email or password. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me")]
        public bool RememberMe { get; set; }
    }
}
