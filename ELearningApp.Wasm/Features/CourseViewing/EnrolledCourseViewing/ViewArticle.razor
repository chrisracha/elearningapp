@using ELearningApp.Wasm.Models.Entities
@using ELearningApp.Wasm.Models.Enums

<div class="space-y-4">
    @if (Lesson != null)
    {
        <div class="bg-white border border-gray-200 rounded-lg p-6">
            @if (!string.IsNullOrEmpty(Lesson.Content))
            {
                <div class="prose max-w-none">
                    <p class="text-gray-700 leading-relaxed">@Lesson.Content</p>
                </div>
            }
            else
            {
                <div class="text-center py-8">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    <p class="mt-2 text-gray-500">No article content available yet</p>
                </div>
            }
        </div>

        <!-- Article Actions -->
        <div class="flex items-center justify-between">
            <div class="text-sm text-gray-600">
                @if (Lesson.DurationMinutes > 0)
                {
                    <span>Estimated reading time: @Lesson.DurationMinutes minutes</span>
                }
            </div>
            
            <button @onclick="MarkCompleted"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
                Mark Complete
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public Lesson? Lesson { get; set; }
    [Parameter] public EventCallback<int> OnCompleted { get; set; }

    private async Task MarkCompleted()
    {
        if (Lesson != null)
        {
            await OnCompleted.InvokeAsync(Lesson.Id);
        }
    }
} 